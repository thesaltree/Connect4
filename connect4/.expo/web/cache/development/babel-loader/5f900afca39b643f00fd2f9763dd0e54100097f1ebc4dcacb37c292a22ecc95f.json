{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { widthPercentageToDP as wp, heightPercentageToDP as hp } from 'react-native-responsive-screen';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Board = function Board(_ref) {\n  var data = _ref.data,\n    set = _ref.set,\n    currentPlayer = _ref.currentPlayer,\n    setCurrentPlayer = _ref.setCurrentPlayer,\n    isDisabled = _ref.isDisabled,\n    setIsDisabled = _ref.setIsDisabled,\n    isAI = _ref.isAI,\n    setIsAI = _ref.setIsAI;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showAlert = _useState2[0],\n    setShowAlert = _useState2[1];\n  useEffect(function () {\n    if (isAI && currentPlayer === 2) {\n      var timer = setTimeout(function () {\n        aiTurn();\n      }, 2000);\n      return function () {\n        return clearTimeout(timer);\n      };\n    }\n  }, [currentPlayer]);\n  var styles = StyleSheet.create({\n    boardView: {\n      flex: 5,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    board: {\n      width: wp(90),\n      height: hp(38.6),\n      backgroundColor: \"#1b2f78\",\n      flexDirection: 'row',\n      alignItems: 'flex-start',\n      justifyContent: 'center',\n      flexWrap: 'wrap'\n    },\n    disc: {\n      width: wp(12),\n      height: hp(6),\n      borderRadius: wp(15),\n      backgroundColor: 'white',\n      margin: wp(0.4)\n    },\n    button: {\n      width: wp(25),\n      height: hp(5),\n      alignItems: \"center\",\n      justifyContent: 'center',\n      backgroundColor: \"#0164fe\",\n      borderRadius: wp(3),\n      marginTop: wp(7)\n    },\n    buttonText: {\n      color: 'white',\n      fontSize: wp(5.2),\n      fontFamily: 'notoserif',\n      fontWeight: '300'\n    },\n    aiText: {\n      color: 'black',\n      fontSize: wp(8),\n      fontFamily: 'notoserif',\n      paddingTop: wp(5.8),\n      paddingLeft: wp(5),\n      marginLeft: wp(3)\n    },\n    switch: {\n      transform: [{\n        scaleX: 2\n      }, {\n        scaleY: 2\n      }],\n      marginLeft: wp(5),\n      marginTop: wp(6.7)\n    }\n  });\n  var checkAvailableColumns = function checkAvailableColumns(board) {\n    var availableColumns = [];\n    for (var column = 0; column <= 6; column++) {\n      for (var row = 5; row >= 0; row--) {\n        if (board[row][column] == null) {\n          availableColumns.push(column);\n          break;\n        }\n      }\n    }\n    return availableColumns;\n  };\n  var getEmptyRow = function getEmptyRow(column, board) {\n    var row = 5;\n    while (row >= 0) {\n      if (board[row][column] == null) return row;\n      row = row - 1;\n    }\n  };\n  var placeDisc = function placeDisc(emptyRow, column, player) {\n    var updateddata = _toConsumableArray(data);\n    updateddata[emptyRow][column] = player;\n    set(updateddata);\n  };\n  var checkWin = function checkWin(board, player) {\n    for (var row = 0; row <= 5; row++) {\n      for (var column = 0; column <= 6; column++) {\n        if (column <= 3 && board[row][column] === player && board[row][column + 1] === player && board[row][column + 2] === player && board[row][column + 3] === player) {\n          return true;\n        }\n        if (row <= 2 && board[row][column] === player && board[row + 1][column] === player && board[row + 2][column] === player && board[row + 3][column] === player) {\n          return true;\n        }\n        if (row >= 3 && column <= 3 && board[row][column] === player && board[row - 1][column + 1] === player && board[row - 2][column + 2] === player && board[row - 3][column + 3] === player) {\n          return true;\n        }\n        if (row >= 3 && column >= 3 && board[row][column] === player && board[row - 1][column - 1] === player && board[row - 2][column - 2] === player && board[row - 3][column - 3] === player) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  var takeTurn = function takeTurn(column) {\n    var availableColumns = checkAvailableColumns(data);\n    if (!availableColumns.includes(column)) {\n      window.alert(\"This column is full! Select another one.\");\n      return;\n    }\n    var emptyRow = getEmptyRow(column, data);\n    placeDisc(emptyRow, column, currentPlayer);\n    if (checkWin(data, currentPlayer)) {\n      setIsDisabled(true);\n      return;\n    }\n    if (checkAvailableColumns(data).length == 0) {\n      setCurrentPlayer(0);\n      setIsDisabled(true);\n      return;\n    }\n    setCurrentPlayer(currentPlayer === 1 ? 2 : 1);\n  };\n  var restartGame = function restartGame() {\n    var newdata = Array(6).fill(null).map(function () {\n      return Array(7).fill(null);\n    });\n    set(newdata);\n    setCurrentPlayer(1);\n    setIsDisabled(false);\n  };\n  var getWindowScore = function getWindowScore(window) {\n    var humanPiece = 1;\n    var aiPiece = 2;\n    var score = 0;\n    if (window.filter(function (p) {\n      return p == aiPiece;\n    }).length == 3 && window.filter(function (p) {\n      return p == null;\n    }).length == 1) {\n      score = score + 5;\n    } else if (window.filter(function (p) {\n      return p == aiPiece;\n    }).length == 2 && window.filter(function (p) {\n      return p == null;\n    }).length == 2) {\n      score = score + 2;\n    }\n    if (window.filter(function (p) {\n      return p == humanPiece;\n    }).length == 3 && window.filter(function (p) {\n      return p == null;\n    }).length == 1) {\n      score = score - 4;\n    }\n    return score;\n  };\n  var evaluate = function evaluate(board) {\n    var aiPiece = 2;\n    var score = 0;\n    var centerColumn = 3;\n    var centerAiPieces = 0;\n    for (var row = 0; row <= 5; row++) {\n      if (board[row][centerColumn] == aiPiece) centerAiPieces++;\n    }\n    score += centerAiPieces * 3;\n    for (var _row = 0; _row <= 5; _row++) {\n      for (var column = 0; column <= 6; column++) {\n        if (column <= 3) {\n          var horizontalWindow = [board[_row][column], board[_row][column + 1], board[_row][column + 2], board[_row][column + 3]];\n          score += getWindowScore(horizontalWindow);\n        }\n        if (_row <= 2) {\n          var verticalWindow = [board[_row][column], board[_row + 1][column], board[_row + 2][column], board[_row + 3][column]];\n          score += getWindowScore(verticalWindow);\n        }\n        if (_row >= 3 && column <= 3) {\n          var diagonalWindow = [board[_row][column], board[_row - 1][column + 1], board[_row - 2][column + 2], board[_row - 3][column + 3]];\n          score += getWindowScore(diagonalWindow);\n        }\n        if (_row >= 3 && column >= 3) {\n          var _diagonalWindow = [board[_row][column], board[_row - 1][column - 1], board[_row - 2][column - 2], board[_row - 3][column - 3]];\n          score += getWindowScore(_diagonalWindow);\n        }\n      }\n    }\n    return score;\n  };\n  var minimax = function minimax(board, depth, maximizingPlayer) {\n    var humanPiece = 1;\n    var aiPiece = 2;\n    var availableColumns = checkAvailableColumns(board);\n    if (depth == 0 || checkWin(board, aiPiece) || checkWin(board, humanPiece) || availableColumns.length == 0) {\n      if (checkWin(board, aiPiece)) {\n        return {\n          score: 10000 - depth,\n          column: null\n        };\n      } else if (checkWin(board, humanPiece)) {\n        return {\n          score: -10000 + depth,\n          column: null\n        };\n      } else if (checkAvailableColumns(board).length == 0) {\n        return {\n          score: 0,\n          column: null\n        };\n      } else {\n        return evaluate(board);\n      }\n    }\n    if (maximizingPlayer) {\n      var bestScore = -Infinity;\n      var bestColumn = Math.floor(Math.random() * board.length);\n      for (var column of availableColumns) {\n        var emptyRow = getEmptyRow(column, board);\n        var boardCopy = board.map(function (row) {\n          return row.slice();\n        });\n        boardCopy[emptyRow][column] = aiPiece;\n        var currentScore = minimax(boardCopy, depth - 1, false).score;\n        if (currentScore > bestScore) {\n          bestScore = currentScore;\n          bestColumn = column;\n        }\n      }\n      return {\n        score: bestScore,\n        column: bestColumn\n      };\n    } else {\n      var _bestScore = Infinity;\n      var _bestColumn = Math.floor(Math.random() * board.length);\n      for (var _column of availableColumns) {\n        var _emptyRow = getEmptyRow(_column, board);\n        var _boardCopy = board.map(function (row) {\n          return row.slice();\n        });\n        _boardCopy[_emptyRow][_column] = humanPiece;\n        var _currentScore = minimax(_boardCopy, depth - 1, true).score;\n        if (_currentScore < _bestScore) {\n          _bestScore = _currentScore;\n          _bestColumn = _column;\n        }\n      }\n      return {\n        score: _bestScore,\n        column: _bestColumn\n      };\n    }\n  };\n  var aiTurn = function aiTurn() {\n    var boardCopy = data.map(function (row) {\n      return row.slice();\n    });\n    var bestMove = minimax(boardCopy, 4, true).column;\n    var emptyRow = getEmptyRow(bestMove, data);\n    placeDisc(emptyRow, bestMove, currentPlayer);\n    if (checkWin(data, currentPlayer)) {\n      setIsDisabled(true);\n      return;\n    }\n    if (checkAvailableColumns(data).length == 0) {\n      setCurrentPlayer(0);\n      setIsDisabled(true);\n      return;\n    }\n    setCurrentPlayer(1);\n  };\n  var Disc = function Disc(_ref2) {\n    var value = _ref2.value,\n      columnIndex = _ref2.columnIndex,\n      disabled = _ref2.disabled,\n      onDiscPress = _ref2.onDiscPress;\n    var discStyle = styles.disc;\n    if (value == 1) {\n      discStyle = [styles.disc, {\n        backgroundColor: '#ccb002'\n      }];\n    } else if (value == 2) {\n      discStyle = [styles.disc, {\n        backgroundColor: '#b11d22'\n      }];\n    }\n    return _jsx(TouchableWithoutFeedback, {\n      disabled: disabled,\n      onPress: function onPress() {\n        return onDiscPress(columnIndex);\n      },\n      children: _jsx(View, {\n        style: discStyle\n      })\n    });\n  };\n  var renderItem = function renderItem(_ref3) {\n    var item = _ref3.item;\n    return _jsx(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      children: item.map(function (value, columnIndex) {\n        return _jsx(Disc, {\n          value: value,\n          columnIndex: columnIndex,\n          disabled: isDisabled,\n          onDiscPress: takeTurn\n        }, columnIndex);\n      })\n    });\n  };\n  return _jsxs(View, {\n    style: styles.boardView,\n    children: [_jsx(View, {\n      style: styles.board,\n      children: _jsx(FlatList, {\n        data: data,\n        extraData: data,\n        renderItem: renderItem,\n        keyExtractor: function keyExtractor(_, index) {\n          return index.toString();\n        }\n      })\n    }), _jsxs(View, {\n      style: {\n        flexDirection: 'row',\n        marginTop: wp(6),\n        marginBottom: wp(6)\n      },\n      children: [_jsx(TouchableHighlight, {\n        underlayColor: \"transparent\",\n        onPress: function onPress() {\n          return restartGame();\n        },\n        children: _jsx(View, {\n          style: styles.button,\n          children: _jsx(Text, {\n            style: styles.buttonText,\n            children: \" Restart \"\n          })\n        })\n      }), _jsx(Text, {\n        style: styles.aiText,\n        children: \" AI: \"\n      }), _jsx(Switch, {\n        style: styles.switch,\n        value: isAI,\n        trackColor: {\n          true: \"red\",\n          false: \"gray\"\n        },\n        thumbColor: isAI ? \"blue\" : \"white\",\n        onValueChange: function onValueChange() {\n          setIsAI(!isAI);\n          if (!isAI) {\n            restartGame();\n            window.alert('AI enabled! Game restarted. Now AI will play as the opponent.');\n          } else {\n            restartGame();\n            window.alert('AI disabled! Game restarted. Now the human will play as the opponent.');\n          }\n        }\n      })]\n    })]\n  });\n};\nexport default Board;","map":{"version":3,"names":["React","useEffect","useState","View","Text","FlatList","TouchableWithoutFeedback","TouchableHighlight","Switch","StyleSheet","widthPercentageToDP","wp","heightPercentageToDP","hp","jsx","_jsx","jsxs","_jsxs","Board","_ref","data","set","currentPlayer","setCurrentPlayer","isDisabled","setIsDisabled","isAI","setIsAI","_useState","_useState2","_slicedToArray","showAlert","setShowAlert","timer","setTimeout","aiTurn","clearTimeout","styles","create","boardView","flex","alignItems","justifyContent","board","width","height","backgroundColor","flexDirection","flexWrap","disc","borderRadius","margin","button","marginTop","buttonText","color","fontSize","fontFamily","fontWeight","aiText","paddingTop","paddingLeft","marginLeft","switch","transform","scaleX","scaleY","checkAvailableColumns","availableColumns","column","row","push","getEmptyRow","placeDisc","emptyRow","player","updateddata","_toConsumableArray","checkWin","takeTurn","includes","window","alert","length","restartGame","newdata","Array","fill","map","getWindowScore","humanPiece","aiPiece","score","filter","p","evaluate","centerColumn","centerAiPieces","horizontalWindow","verticalWindow","diagonalWindow","minimax","depth","maximizingPlayer","bestScore","Infinity","bestColumn","Math","floor","random","boardCopy","slice","currentScore","bestMove","Disc","_ref2","value","columnIndex","disabled","onDiscPress","discStyle","onPress","children","style","renderItem","_ref3","item","extraData","keyExtractor","_","index","toString","marginBottom","underlayColor","trackColor","true","false","thumbColor","onValueChange"],"sources":["/usercode/connect4/components/Board.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import { \n//   View,\n//   Text,\n//   FlatList,\n//   TouchableWithoutFeedback,\n//   TouchableHighlight,\n//   Switch,\n//   StyleSheet\n// } from 'react-native';\n// import { \n//   widthPercentageToDP as wp,\n//   heightPercentageToDP as hp\n// } from 'react-native-responsive-screen';\n\n// const Board = ({ data, set, turn, setTurn, disabled, setDisabled, ai, setAi }) => {\n\n//   /*\n//     Props\n//     data => 2d array of 6 rows and 7 columns representing the state of the connect4 game board\n//     set => Method to update the data prop\n//     turn => Integer representing whose turn it is, i.e., player 1, player 2, or AI\n//     setTurn => Method to update the turn prop\n//     disabled => Boolean to enable or disable the connect4 game board. Board is disabled once the game is over\n//     setDisabled => Method to update the disabled prop\n//     ai => Boolean representing whether the AI is playing or not. If false, it means player 2 is playing\n//     setAi => Method to update the ai prop\n//   */\n//   const [showAlert, setShowAlert] = useState(false)\n\n//   useEffect(() => {\n//     if (ai == true && turn == 2) {\n//       const timer = setTimeout(() => {\n//         aiTurn();\n//       }, 2000);\n//       return () => clearTimeout(timer);\n//     }\n//   }, [turn]);\n\n// const styles = StyleSheet.create({\n//   boardView: {\n//     flex: 5,\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//   },\n//   board: {\n//     width: wp(90),\n//     height: hp(38.6),\n//     backgroundColor: \"#1b2f78\",\n//     flexDirection: 'row',\n//     alignItems: 'flex-start',\n//     justifyContent: 'center',\n//     flexWrap: 'wrap'\n//   },\n//   disc: {\n//     width: wp(12),\n//     height: hp(6),\n//     borderRadius: wp(15),\n//     backgroundColor: 'white',\n//     margin: wp(0.4)\n//   },\n//   button: {\n//     width: wp(25),\n//     height: hp(5),\n//     alignItems: \"center\",\n//     justifyContent: 'center',\n//     backgroundColor: \"#0164fe\",\n//     borderRadius: wp(3),\n//     marginTop: wp(7)\n//   },\n//   buttonText: {\n//     color: 'white',\n//     fontSize: wp(5.2),\n//     fontFamily: 'notoserif',\n//     fontWeight: '300',\n//   },\n//   aiText: {\n//     color: 'black',\n//     fontSize: wp(8),\n//     fontFamily: 'notoserif',\n//     paddingTop: wp(5.8),\n//     paddingLeft: wp(5),\n//     marginLeft: wp(3),\n//   },\n//   switch: {\n//     transform: [{ scaleX: 2 }, { scaleY: 2 }],\n//     marginLeft: wp(5),\n//     marginTop: wp(6.7)\n//   },\n// });\n\n//   /*\n//     Parameters\n//     board => 2d array of 6 rows and 7 columns representing the connect4 game board\n//   */\n//   const checkAvailableColumns = (board) => {\n//     let availableColumns = [];\n//     for (let column = 0; column <= 6; column++) {\n//       for (let row = 5; row >= 0; row--) {\n//         if (board[row][column] == null) {\n//           availableColumns.push(column);\n//           break;\n//         }\n//       }\n//     }\n//     return availableColumns;\n//   }\n\n//   /*\n//     Parameters\n//     column => Integer between 0 and 6 (inclusive) representing column index of the connect4 game board\n//     board => 2d array of 6 rows and 7 columns representing the connect4 game board\n//   */\n//   const getEmptyRow = (column, board) => {\n//     let row = 5;\n//     while (row >= 0) {\n//       if (board[row][column] == null)\n//         return row;\n//       row = row - 1;\n//     }\n//   }\n\n//   /*\n//     Parameters\n//     emptyRow => Integer representing row index having a value of null where disc can be placed\n//     column => Integer between 0 and 6 (inclusive) representing column index of the connect4 game board\n//     player => Integer representing 1 for player 1 and 2 for player 2 or AI\n//   */\n//   const placeDisc = (emptyRow, column, player) => {\n//     let dataCopy = [...data];\n//     dataCopy[emptyRow][column] = player;\n//     set(dataCopy);\n//   }\n\n//   /*\n//     Parameters\n//     board => 2d array of 6 rows and 7 columns representing the connect4 game board\n//     player => Integer representing 1 for player 1 and 2 for player 2 or AI\n//   */\n//   const checkWin = (board, player) => {\n//     for (let row = 0; row <= 5; row++) {\n//       for (let column = 0; column <= 6; column++) {\n//         // horizontal win\n//         if (column <= 3 && board[row][column] === player && board[row][column + 1] === player && board[row][column + 2] === player && board[row][column + 3] === player) {\n//           return true;\n//         }\n//         // vertical win\n//         if (row <= 2 && board[row][column] === player && board[row + 1][column] === player && board[row + 2][column] === player && board[row + 3][column] === player) {\n//           return true;\n//         }\n//         // positive diagonals win\n//         if (row >= 3 && column <= 3 && board[row][column] === player && board[row - 1][column + 1] === player && board[row - 2][column + 2] === player && board[row - 3][column + 3] === player) {\n//           return true;\n//         }\n//         // negative diagonals win\n//         if (row >= 3 && column >= 3 && board[row][column] === player && board[row - 1][column - 1] === player && board[row - 2][column - 2] === player && board[row - 3][column - 3] === player) {\n//           return true;\n//         }\n//       }\n//     }\n//     return false;\n//   }\n\n//   /*\n//     Parameters\n//     column => Integer between 0 and 6 (inclusive) representing column index of the connect4 game board\n//   */\n//   const takeTurn = (column) => {\n//     const availableColumns = checkAvailableColumns(data);\n//     if (!availableColumns.includes(column)) {\n//       window.alert(\"This column is full! Select another one.\");\n//       return;\n//     }\n//     const emptyRow = getEmptyRow(column, data);\n//     placeDisc(emptyRow, column, turn);\n//     if (checkWin(data, turn) == true) {\n//       setDisabled(true);\n//       return;\n//     }\n//     if (checkAvailableColumns(data).length == 0) {\n//       setTurn(0);\n//       setDisabled(true);\n//       return;\n//     }\n//     turn == 1? setTurn(2) : setTurn(1);\n\n//   }\n\n//   const restartGame = () => {\n//     const newData = Array(6).fill(null).map(() => Array(7).fill(null));\n//     set(newData);\n//     setTurn(1);\n//     setDisabled(false);\n//   }\n\n//   /*\n//     Parameters\n//     window => An array of length 4 whose indices can have one of the following values: 1, 2, and null\n//   */\n//   const getWindowScore = (window) => {\n//     const humanPiece = 1;\n//     const aiPiece = 2;\n//     let score = 0;\n//     if ((window.filter(p => p == aiPiece).length == 3) && (window.filter(p => p == null).length == 1)) {\n//       score = score + 5;\n//     }\n//     else if ((window.filter(p => p == aiPiece).length == 2) && (window.filter(p => p == null).length == 2)) {\n//       score = score + 2;\n//     }\n//     if ((window.filter(p => p == humanPiece).length == 3) && (window.filter(p => p == null).length == 1)) {\n//       score = score - 4;\n//     }\n//     return score;\n//   }\n\n//   /*\n//     Parameters\n//     board => 2d array of 6 rows and 7 columns representing the connect4 game board\n//   */\n//   const evaluate = (board) => {\n//     const aiPiece = 2;\n//     let score = 0;\n//     // Center column score check\n//     const centerColumn = 3;\n//     let centerAiPieces = 0;\n//     for (let row = 0; row <= 5; row++) {\n//       if (board[row][centerColumn] == aiPiece)\n//         centerAiPieces++;\n//     }\n//     score += (centerAiPieces * 3);\n//     for (let row = 0; row <= 5; row++) {\n//       for (let column = 0; column <= 6; column++) {\n//         // Horizontal score check\n//         if (column <= 3) {\n//           const horizontalWindow = [board[row][column], board[row][column+1], board[row][column+2], board[row][column+3]];\n//           score += getWindowScore(horizontalWindow);\n//         }\n//         // Vertical score check\n//         if (row <= 2) {\n//           const verticalWindow = [board[row][column], board[row+1][column], board[row+2][column], board[row+3][column]];\n//           score += getWindowScore(verticalWindow);\n//         }\n//         // Positive diagonals score check\n//         if (row >= 3 && column <= 3) {\n//           const diagonalWindow = [board[row][column], board[row-1][column+1], board[row-2][column+2], board[row-3][column+3]];\n//           score += getWindowScore(diagonalWindow);\n//         }\n//         // Negative diagonals score check\n//         if (row >= 3 && column >= 3) {\n//           const diagonalWindow = [board[row][column], board[row-1][column-1], board[row-2][column-2], board[row-3][column-3]];\n//           score += getWindowScore(diagonalWindow);\n//         }\n//       }\n//     }\n//     return score;\n//   }\n\n//   /*\n//     Parameters\n//     board => 2d array of 6 rows and 7 columns representing the connect4 game board\n//     depth => Integer representing the recursion depth. Can have values 1 and greater than 1\n//     maximizingPlayer => Boolean value representing whether the player is maximizing or not\n//   */\n//   const minimax = (board, depth, maximizingPlayer) => {\n//     const humanPiece = 1;\n//     const aiPiece = 2;\n//     const availableColumns = checkAvailableColumns(board);\n//     // base recursion case. Stop if depth is 0, AI wins, human wins, or it is a draw\n//     if (depth == 0 || checkWin(board, aiPiece) || checkWin(board, humanPiece) || availableColumns.length == 0) {\n//       if (checkWin(board, aiPiece)) {\n//         return { score: 10000 - depth, column: null };\n//       }\n//       else if (checkWin(board, humanPiece)) {\n//         return { score: -10000 + depth, column: null };\n//       }\n//       else if (checkAvailableColumns(board).length == 0) {\n//         return { score: 0, column: null };\n//       }\n//       else {\n//         return evaluate(board); // how close is AI to winning or losing and return points accordingly\n//       }\n//     }\n//     // maximizing player\n//     if (maximizingPlayer) {\n//       let bestScore = -Infinity;\n//       let bestColumn = Math.floor(Math.random() * board.length);\n//       for (const column of availableColumns) {\n//         const emptyRow = getEmptyRow(column, board);\n//         let boardCopy = board.map(row => row.slice());\n//         boardCopy[emptyRow][column] = aiPiece;\n//         let currentScore = minimax(boardCopy, depth - 1, false).score;\n//         if (currentScore > bestScore) {\n//           bestScore = currentScore;\n//           bestColumn = column;\n//         }\n//       }\n//       return { score: bestScore, column: bestColumn };\n//     }\n//     // minimizing player\n//     else {\n//       let bestScore = Infinity;\n//       let bestColumn = Math.floor(Math.random() * board.length);\n//       for (const column of availableColumns) {\n//         const emptyRow = getEmptyRow(column, board);\n//         let boardCopy = board.map(row => row.slice());\n//         boardCopy[emptyRow][column] = humanPiece;\n//         let currentScore = minimax(boardCopy, depth - 1, true).score;\n//         if (currentScore < bestScore) {\n//           bestScore = currentScore;\n//           bestColumn = column;\n//         }\n//       }\n//       return { score: bestScore, column: bestColumn };\n//     }\n//   }\n\n//   const aiTurn = () => {\n//     let dataCopy = data.map(row => row.slice());\n//     const bestMove = minimax(dataCopy, 4, true).column;\n//     const emptyRow = getEmptyRow(bestMove, data);\n//     placeDisc(emptyRow, bestMove, turn);\n//     if (checkWin(data, turn) == true) {\n//       setDisabled(true);\n//       return;\n//     }\n//     if (checkAvailableColumns(data).length == 0) {\n//       setTurn(0);\n//       setDisabled(true);\n//       return;\n//     }\n//     setTurn(1);\n//   }\n\n//   // Write Task 2 and Task 3 code below this line\n\n//   const Disc = ({ value, columnIndex, disabled, onDiscPress }) => {\n//     let discStyle = styles.disc;\n//     if (value == 1) {\n//         discStyle = [styles.disc, { backgroundColor: '#ccb002' }];\n//     } else if (value == 2) {\n//         discStyle = [styles.disc, { backgroundColor: '#b11d22' }];\n//     }\n//     return (\n//         <TouchableWithoutFeedback disabled={disabled} onPress={() => onDiscPress(columnIndex)}>\n//           <View style={discStyle}></View>\n//         </TouchableWithoutFeedback>\n//     );\n//   };\n\n//   const renderItem = ({ item }) => (\n//     <View style={{ flexDirection: 'row' }}>\n//         {item.map((value, columnIndex) => (\n//             <Disc key={columnIndex} value={value} columnIndex={columnIndex} disabled={disabled} onDiscPress={takeTurn} />\n//         ))}\n//     </View>\n//   );\n\n//   // Write Task 3 code below this line\n\n//   return (\n//     <View style={styles.boardView}>\n//       <View style={styles.board}>\n//         <FlatList\n//           data={data}\n//           extraData={data}\n//           renderItem={renderItem}\n//           keyExtractor={(_, index) => index.toString()}\n//         />\n//       </View>\n//       <View style={{flexDirection: 'row', marginTop: wp(6), marginBottom: wp(6)}}>\n//         <TouchableHighlight\n//           underlayColor=\"transparent\"\n//           onPress={() => restartGame()}\n//         >\n//           <View style={styles.button}>\n//               <Text style={styles.buttonText}> Restart </Text>\n//           </View>\n//         </TouchableHighlight>\n//         <Text style={styles.aiText}> AI: </Text>\n//         <Switch\n//           style={styles.switch}\n//           value={ ai }\n//           trackColor={{ true: \"red\", false: \"gray\" }}\n//           thumbColor={ ai ? \"blue\" : \"white\" }\n//           onValueChange={() => {\n//             setAi(!ai)\n//             if (!ai) {\n//               restartGame();\n//               window.alert('AI enabled! Game restarted. Now AI will play as the opponent.');\n//             } \n//             else {\n//               restartGame();\n//               window.alert('AI disabled! Game restarted. Now the human will play as the opponent.');\n//             }\n//           }}\n//         />\n//       </View>\n//     </View>\n//   );\n// };\n\n// export default Board;\n\nimport React, { useEffect, useState } from 'react';\nimport { \n  View,\n  Text,\n  FlatList,\n  TouchableWithoutFeedback,\n  TouchableHighlight,\n  Switch,\n  StyleSheet\n} from 'react-native';\nimport { \n  widthPercentageToDP as wp,\n  heightPercentageToDP as hp\n} from 'react-native-responsive-screen';\n\nconst Board = ({ data, set, currentPlayer, setCurrentPlayer, isDisabled, setIsDisabled, isAI, setIsAI }) => {\n\n  /*\n    Props\n    data => 2d array of 6 rows and 7 columns representing the state of the connect4 game board\n    set => Method to update the data prop\n    currentPlayer => Integer representing whose turn it is, i.e., player 1, player 2, or AI\n    setCurrentPlayer => Method to update the currentPlayer prop\n    isDisabled => Boolean to enable or disable the connect4 game board. Board is disabled once the game is over\n    setIsDisabled => Method to update the isDisabled prop\n    isAI => Boolean representing whether the AI is playing or not. If false, it means player 2 is playing\n    setIsAI => Method to update the isAI prop\n  */\n  const [showAlert, setShowAlert] = useState(false)\n\n  useEffect(() => {\n    if (isAI && currentPlayer === 2) {\n      const timer = setTimeout(() => {\n        aiTurn();\n      }, 2000);\n      return () => clearTimeout(timer);\n    }\n  }, [currentPlayer]);\n\n  const styles = StyleSheet.create({\n    boardView: {\n      flex: 5,\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    board: {\n      width: wp(90),\n      height: hp(38.6),\n      backgroundColor: \"#1b2f78\",\n      flexDirection: 'row',\n      alignItems: 'flex-start',\n      justifyContent: 'center',\n      flexWrap: 'wrap'\n    },\n    disc: {\n      width: wp(12),\n      height: hp(6),\n      borderRadius: wp(15),\n      backgroundColor: 'white',\n      margin: wp(0.4)\n    },\n    button: {\n      width: wp(25),\n      height: hp(5),\n      alignItems: \"center\",\n      justifyContent: 'center',\n      backgroundColor: \"#0164fe\",\n      borderRadius: wp(3),\n      marginTop: wp(7)\n    },\n    buttonText: {\n      color: 'white',\n      fontSize: wp(5.2),\n      fontFamily: 'notoserif',\n      fontWeight: '300',\n    },\n    aiText: {\n      color: 'black',\n      fontSize: wp(8),\n      fontFamily: 'notoserif',\n      paddingTop: wp(5.8),\n      paddingLeft: wp(5),\n      marginLeft: wp(3),\n    },\n    switch: {\n      transform: [{ scaleX: 2 }, { scaleY: 2 }],\n      marginLeft: wp(5),\n      marginTop: wp(6.7)\n    },\n  });\n\n  const checkAvailableColumns = (board) => {\n    let availableColumns = [];\n    for (let column = 0; column <= 6; column++) {\n      for (let row = 5; row >= 0; row--) {\n        if (board[row][column] == null) {\n          availableColumns.push(column);\n          break;\n        }\n      }\n    }\n    return availableColumns;\n  }\n\n  const getEmptyRow = (column, board) => {\n    let row = 5;\n    while (row >= 0) {\n      if (board[row][column] == null)\n        return row;\n      row = row - 1;\n    }\n  }\n\n  const placeDisc = (emptyRow, column, player) => {\n    let updateddata = [...data];\n    updateddata[emptyRow][column] = player;\n    set(updateddata);\n  }\n\n  const checkWin = (board, player) => {\n    for (let row = 0; row <= 5; row++) {\n      for (let column = 0; column <= 6; column++) {\n        if (column <= 3 && board[row][column] === player && board[row][column + 1] === player && board[row][column + 2] === player && board[row][column + 3] === player) {\n          return true;\n        }\n        if (row <= 2 && board[row][column] === player && board[row + 1][column] === player && board[row + 2][column] === player && board[row + 3][column] === player) {\n          return true;\n        }\n        if (row >= 3 && column <= 3 && board[row][column] === player && board[row - 1][column + 1] === player && board[row - 2][column + 2] === player && board[row - 3][column + 3] === player) {\n          return true;\n        }\n        if (row >= 3 && column >= 3 && board[row][column] === player && board[row - 1][column - 1] === player && board[row - 2][column - 2] === player && board[row - 3][column - 3] === player) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  const takeTurn = (column) => {\n    const availableColumns = checkAvailableColumns(data);\n    if (!availableColumns.includes(column)) {\n      window.alert(\"This column is full! Select another one.\");\n      return;\n    }\n    const emptyRow = getEmptyRow(column, data);\n    placeDisc(emptyRow, column, currentPlayer);\n    if (checkWin(data, currentPlayer)) {\n      setIsDisabled(true);\n      return;\n    }\n    if (checkAvailableColumns(data).length == 0) {\n      setCurrentPlayer(0);\n      setIsDisabled(true);\n      return;\n    }\n    setCurrentPlayer(currentPlayer === 1 ? 2 : 1);\n  }\n\n  const restartGame = () => {\n    const newdata = Array(6).fill(null).map(() => Array(7).fill(null));\n    set(newdata);\n    setCurrentPlayer(1);\n    setIsDisabled(false);\n  }\n\n  const getWindowScore = (window) => {\n    const humanPiece = 1;\n    const aiPiece = 2;\n    let score = 0;\n    if ((window.filter(p => p == aiPiece).length == 3) && (window.filter(p => p == null).length == 1)) {\n      score = score + 5;\n    }\n    else if ((window.filter(p => p == aiPiece).length == 2) && (window.filter(p => p == null).length == 2)) {\n      score = score + 2;\n    }\n    if ((window.filter(p => p == humanPiece).length == 3) && (window.filter(p => p == null).length == 1)) {\n      score = score - 4;\n    }\n    return score;\n  }\n\n  const evaluate = (board) => {\n    const aiPiece = 2;\n    let score = 0;\n    const centerColumn = 3;\n    let centerAiPieces = 0;\n    for (let row = 0; row <= 5; row++) {\n      if (board[row][centerColumn] == aiPiece)\n        centerAiPieces++;\n    }\n    score += (centerAiPieces * 3);\n    for (let row = 0; row <= 5; row++) {\n      for (let column = 0; column <= 6; column++) {\n        if (column <= 3) {\n          const horizontalWindow = [board[row][column], board[row][column+1], board[row][column+2], board[row][column+3]];\n          score += getWindowScore(horizontalWindow);\n        }\n        if (row <= 2) {\n          const verticalWindow = [board[row][column], board[row+1][column], board[row+2][column], board[row+3][column]];\n          score += getWindowScore(verticalWindow);\n        }\n        if (row >= 3 && column <= 3) {\n          const diagonalWindow = [board[row][column], board[row-1][column+1], board[row-2][column+2], board[row-3][column+3]];\n          score += getWindowScore(diagonalWindow);\n        }\n        if (row >= 3 && column >= 3) {\n          const diagonalWindow = [board[row][column], board[row-1][column-1], board[row-2][column-2], board[row-3][column-3]];\n          score += getWindowScore(diagonalWindow);\n        }\n      }\n    }\n    return score;\n  }\n\n  const minimax = (board, depth, maximizingPlayer) => {\n    const humanPiece = 1;\n    const aiPiece = 2;\n    const availableColumns = checkAvailableColumns(board);\n    if (depth == 0 || checkWin(board, aiPiece) || checkWin(board, humanPiece) || availableColumns.length == 0) {\n      if (checkWin(board, aiPiece)) {\n        return { score: 10000 - depth, column: null };\n      }\n      else if (checkWin(board, humanPiece)) {\n        return { score: -10000 + depth, column: null };\n      }\n      else if (checkAvailableColumns(board).length == 0) {\n        return { score: 0, column: null };\n      }\n      else {\n        return evaluate(board);\n      }\n    }\n    if (maximizingPlayer) {\n      let bestScore = -Infinity;\n      let bestColumn = Math.floor(Math.random() * board.length);\n      for (const column of availableColumns) {\n        const emptyRow = getEmptyRow(column, board);\n        let boardCopy = board.map(row => row.slice());\n        boardCopy[emptyRow][column] = aiPiece;\n        let currentScore = minimax(boardCopy, depth - 1, false).score;\n        if (currentScore > bestScore) {\n          bestScore = currentScore;\n          bestColumn = column;\n        }\n      }\n      return { score: bestScore, column: bestColumn };\n    }\n    else {\n      let bestScore = Infinity;\n      let bestColumn = Math.floor(Math.random() * board.length);\n      for (const column of availableColumns) {\n        const emptyRow = getEmptyRow(column, board);\n        let boardCopy = board.map(row => row.slice());\n        boardCopy[emptyRow][column] = humanPiece;\n        let currentScore = minimax(boardCopy, depth - 1, true).score;\n        if (currentScore < bestScore) {\n          bestScore = currentScore;\n          bestColumn = column;\n        }\n      }\n      return { score: bestScore, column: bestColumn };\n    }\n  }\n\n  const aiTurn = () => {\n    let boardCopy = data.map(row => row.slice());\n    const bestMove = minimax(boardCopy, 4, true).column;\n    const emptyRow = getEmptyRow(bestMove, data);\n    placeDisc(emptyRow, bestMove, currentPlayer);\n    if (checkWin(data, currentPlayer)) {\n      setIsDisabled(true);\n      return;\n    }\n    if (checkAvailableColumns(data).length == 0) {\n      setCurrentPlayer(0);\n      setIsDisabled(true);\n      return;\n    }\n    setCurrentPlayer(1);\n  }\n\n  const Disc = ({ value, columnIndex, disabled, onDiscPress }) => {\n    let discStyle = styles.disc;\n    if (value == 1) {\n        discStyle = [styles.disc, { backgroundColor: '#ccb002' }];\n    } else if (value == 2) {\n        discStyle = [styles.disc, { backgroundColor: '#b11d22' }];\n    }\n    return (\n        <TouchableWithoutFeedback disabled={disabled} onPress={() => onDiscPress(columnIndex)}>\n          <View style={discStyle}></View>\n        </TouchableWithoutFeedback>\n    );\n  };\n\n  const renderItem = ({ item }) => (\n    <View style={{ flexDirection: 'row' }}>\n        {item.map((value, columnIndex) => (\n            <Disc key={columnIndex} value={value} columnIndex={columnIndex} disabled={isDisabled} onDiscPress={takeTurn} />\n        ))}\n    </View>\n  );\n\n  return (\n    <View style={styles.boardView}>\n      <View style={styles.board}>\n        <FlatList\n          data={data}\n          extraData={data}\n          renderItem={renderItem}\n          keyExtractor={(_, index) => index.toString()}\n        />\n      </View>\n      <View style={{flexDirection: 'row', marginTop: wp(6), marginBottom: wp(6)}}>\n        <TouchableHighlight\n          underlayColor=\"transparent\"\n          onPress={() => restartGame()}\n        >\n          <View style={styles.button}>\n              <Text style={styles.buttonText}> Restart </Text>\n          </View>\n        </TouchableHighlight>\n        <Text style={styles.aiText}> AI: </Text>\n        <Switch\n          style={styles.switch}\n          value={ isAI }\n          trackColor={{ true: \"red\", false: \"gray\" }}\n          thumbColor={ isAI ? \"blue\" : \"white\" }\n          onValueChange={() => {\n            setIsAI(!isAI)\n            if (!isAI) {\n              restartGame();\n              window.alert('AI enabled! Game restarted. Now AI will play as the opponent.');\n            } \n            else {\n              restartGame();\n              window.alert('AI disabled! Game restarted. Now the human will play as the opponent.');\n            }\n          }}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}