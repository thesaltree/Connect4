{"ast":null,"code":"import React, { useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { widthPercentageToDP as wp, heightPercentageToDP as hp } from 'react-native-responsive-screen';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Board = function Board(_ref) {\n  var data = _ref.data,\n    setData = _ref.setData,\n    turn = _ref.turn,\n    setTurn = _ref.setTurn,\n    disabled = _ref.disabled,\n    setDisabled = _ref.setDisabled,\n    ai = _ref.ai,\n    setAi = _ref.setAi;\n  useEffect(function () {}, []);\n  var styles = StyleSheet.create({\n    buttonWrapper: {\n      display: 'flex',\n      flex: 2,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-evenly',\n      rowGap: wp(10)\n    },\n    restartButton: {\n      width: wp(15)\n    },\n    textTitle: {\n      fontSize: wp(8),\n      fontWeight: 400\n    }\n  });\n  var checkAvailableColumns = function checkAvailableColumns(board) {};\n  var getEmptyRow = function getEmptyRow(column, board) {};\n  var placeDisc = function placeDisc(emptyRow, column, player) {};\n  var checkWin = function checkWin(board, player) {};\n  var takeTurn = function takeTurn(column) {};\n  var restartGame = function restartGame() {};\n  var getWindowScore = function getWindowScore(window) {};\n  var evaluate = function evaluate(board) {};\n  var minimax = function minimax(board, depth, maximizingPlayer) {};\n  var aiTurn = function aiTurn() {};\n  return _jsx(View, {\n    children: _jsxs(\"div\", {\n      style: styles.buttonWrapper,\n      children: [_jsx(\"button\", {\n        style: styles.restartButton,\n        onClick: restartGame(),\n        children: \"Restart\"\n      }), _jsx(Text, {\n        style: styles.textTitle,\n        children: \"AI\"\n      })]\n    })\n  });\n};\nexport default Board;","map":{"version":3,"names":["React","useEffect","View","Text","FlatList","TouchableWithoutFeedback","TouchableHighlight","Switch","StyleSheet","widthPercentageToDP","wp","heightPercentageToDP","hp","jsx","_jsx","jsxs","_jsxs","Board","_ref","data","setData","turn","setTurn","disabled","setDisabled","ai","setAi","styles","create","buttonWrapper","display","flex","flexDirection","alignItems","justifyContent","rowGap","restartButton","width","textTitle","fontSize","fontWeight","checkAvailableColumns","board","getEmptyRow","column","placeDisc","emptyRow","player","checkWin","takeTurn","restartGame","getWindowScore","window","evaluate","minimax","depth","maximizingPlayer","aiTurn","children","style","onClick"],"sources":["/usercode/connect4/components/Board.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { \n  View,\n  Text,\n  FlatList,\n  TouchableWithoutFeedback,\n  TouchableHighlight,\n  Switch,\n  StyleSheet\n} from 'react-native';\nimport { \n  widthPercentageToDP as wp,\n  heightPercentageToDP as hp\n} from 'react-native-responsive-screen';\n\nconst Board = ({ data, setData, turn, setTurn, disabled, setDisabled, ai, setAi }) => {\n\n  /*\n    Props\n    data => 2d array of 6 rows and 7 columns representing the state of the connect4 game board\n    setData => Method to update the data prop\n    turn => Integer representing whose turn it is, i.e., player 1, player 2, or AI\n    setTurn => Method to update the turn prop\n    disabled => Boolean to enable or disable the connect4 game board. Board is disabled once the game is over\n    setDisabled => Method to update the disabled prop\n    ai => Boolean representing whether the AI is playing or not. If false, it means player 2 is playing\n    setAi => Method to update the ai prop\n  */\n\n  useEffect(() => {\n    // Write Task 11 code below this line\n  }, []);\n\n  const styles = StyleSheet.create({\n    buttonWrapper: {\n      display: 'flex',\n      flex: 2,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-evenly',\n      rowGap: wp(10),\n    },\n    restartButton: {\n      width: wp(15),\n    },\n    textTitle: {\n        fontSize: wp(8),\n        fontWeight: 400,\n    }\n  })\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n  */\n  const checkAvailableColumns = (board) => {\n    // Write Task 5 code below this line\n  }\n\n  /*\n    Parameters\n    column => Integer between 0 and 6 (inclusive) representing column index of the connect4 game board\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n  */\n  const getEmptyRow = (column, board) => {\n    // Write Task 5 code below this line\n  }\n\n  /*\n    Parameters\n    emptyRow => Integer representing row index having a value of null where disc can be placed\n    column => Integer between 0 and 6 (inclusive) representing column index of the connect4 game board\n    player => Integer representing 1 for player 1 and 2 for player 2 or AI\n  */\n  const placeDisc = (emptyRow, column, player) => {\n    // Write Task 5 code below this line\n  }\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n    player => Integer representing 1 for player 1 and 2 for player 2 or AI\n  */\n  const checkWin = (board, player) => {\n    // Write Task 6 code below this line\n  }\n\n  /*\n    Parameters\n    column => Integer between 0 and 6 (inclusive) representing column index of the connect4 game board\n  */\n  const takeTurn = (column) => {\n    // Write Task 7 code below this line\n  }\n\n  const restartGame = () => {\n    // Write Task 8 code below this line\n  }\n\n  /*\n    Parameters\n    window => An array of length 4 whose indices can have one of the following values: 1, 2, and null\n  */\n  const getWindowScore = (window) => {\n    // Write Task 9 code below this line\n  }\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n  */\n  const evaluate = (board) => {\n    // Write Task 9 code below this line\n  }\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n    depth => Integer representing the recursion depth. Can have values 1 and greater than 1\n    maximizingPlayer => Boolean value representing whether the player is maximizing or not\n  */\n  const minimax = (board, depth, maximizingPlayer) => {\n    // Write Task 10 code below this line\n  }\n\n  const aiTurn = () => {\n    // Write Task 11 code below this line\n  }\n\n  // Write Task 2 and Task 3 code below this line\n\n  return (\n    <View>\n      <div style={styles.buttonWrapper}>\n      <button style={styles.restartButton} onClick={restartGame()}>Restart</button>\n      <Text style={styles.textTitle}>AI</Text> \n      </div>\n      \n    </View>\n  );\n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}