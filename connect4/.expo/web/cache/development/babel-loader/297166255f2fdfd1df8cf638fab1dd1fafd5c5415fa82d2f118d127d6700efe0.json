{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { widthPercentageToDP as wp, heightPercentageToDP as hp } from 'react-native-responsive-screen';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Board = function Board(_ref) {\n  var data = _ref.data,\n    setData = _ref.setData,\n    turn = _ref.turn,\n    setTurn = _ref.setTurn,\n    disabled = _ref.disabled,\n    setDisabled = _ref.setDisabled,\n    ai = _ref.ai,\n    setAi = _ref.setAi;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showAlert = _useState2[0],\n    setShowAlert = _useState2[1];\n  useEffect(function () {}, []);\n  var styles = StyleSheet.create({\n    buttonWrapper: {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-evenly',\n      rowGap: wp(10),\n      margin: wp(4)\n    },\n    restartButton: {\n      height: hp(6),\n      width: wp(20),\n      fontSize: wp(5)\n    },\n    textTitle: {\n      fontSize: wp(6),\n      fontWeight: 500,\n      color: '#268ec7'\n    },\n    boardContainer: {\n      height: 300,\n      width: 350,\n      backgroundColor: 'blue'\n    },\n    disc: {\n      height: 50,\n      width: 50,\n      borderRadius: wp(50)\n    },\n    row: {\n      flexDirection: 'row',\n      flex: 1\n    }\n  });\n  var checkAvailableColumns = function checkAvailableColumns(board) {\n    var emptyCols = [];\n    for (var row = 0; row < 6; row++) {\n      for (var col = 0; col < 7; col++) {\n        if (board[row][col] == null && !emptyCols.includes(col)) {\n          emptyCols.push(col);\n        }\n      }\n    }\n    return emptyCols;\n  };\n  var getEmptyRow = function getEmptyRow(column, board) {\n    for (var row = 0; row < 6; row++) {\n      if (board[row][column] == null) {\n        return row;\n      }\n    }\n    return null;\n  };\n  var placeDisc = function placeDisc(emptyRow, column, player) {\n    var newData = _toConsumableArray(prev);\n    newData[emptyRow][column] = player;\n    setData(newData);\n  };\n  var checkWin = function checkWin(board, player) {\n    for (var row = 0; row < 6; row++) {\n      for (var col = 0; col < 7; col++) {\n        if (col < 4 && board[row][col] === board[row][col + 1] === board[row][col + 2] === board[row][col + 3] === player) {\n          return true;\n        }\n        if (row < 3 && board[row][col] === board[row + 1][col] === board[row + 2][col] === board[row + 3][col] === player) {\n          return true;\n        }\n        if (row < 3 && col < 4 && board[row][col] === board[row + 1][col + 1] === board[row + 2][col + 2] === board[row + 3][col + 3] === player) {\n          return true;\n        }\n        if (row > 2 && col > 2 && board[row][col] === board[row - 1][col - 1] === board[row - 2][col - 2] === board[row - 3][col - 3] === player) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  var takeTurn = function takeTurn(column) {\n    console.log('click on ', column);\n    var availableCols = checkAvailableColumns(data);\n    if (!availableCols.includes(column)) {\n      window.alert(\"This column is full! Select another one.\");\n      return;\n    }\n    var emptyRow = getEmptyRow;\n    if (emptyRow < 6) {\n      placeDisc(emptyRow, column, turn);\n    }\n    if (checkWin(data, turn)) {\n      setDisabled(true);\n      return;\n    }\n    if (checkAvailableColumns(data).length == 0) {\n      setTurn(0);\n      setDisabled(true);\n      return;\n    } else {\n      setTurn(turn == 1 ? 2 : 1);\n    }\n  };\n  var restartGame = function restartGame() {\n    var newData = Array(6).fill(null).map(function () {\n      return Array(7).fill(null);\n    });\n    setData(newData);\n    setTurn(1);\n    setDisabled(false);\n  };\n  var getWindowScore = function getWindowScore(window) {\n    var score = 0;\n    if (ai) {\n      window.map(function (item) {\n        score = item === 2 ? score + 1 : score;\n      });\n    }\n    return score;\n  };\n  var evaluate = function evaluate(board) {\n    var aiPiece = 2;\n    var score = 0;\n    var centerColumn = 3;\n    var centerAiPieces = 0;\n    for (var row = 0; row <= 5; row++) {\n      if (board[row][centerColumn] == aiPiece) centerAiPieces++;\n    }\n    score += centerAiPieces * 3;\n    for (var _row = 0; _row <= 5; _row++) {\n      for (var column = 0; column <= 6; column++) {\n        if (column <= 3) {\n          var horizontalWindow = [board[_row][column], board[_row][column + 1], board[_row][column + 2], board[_row][column + 3]];\n          score += getWindowScore(horizontalWindow);\n        }\n        if (_row <= 2) {\n          var verticalWindow = [board[_row][column], board[_row + 1][column], board[_row + 2][column], board[_row + 3][column]];\n          score += getWindowScore(verticalWindow);\n        }\n        if (_row >= 3 && column <= 3) {\n          var diagonalWindow = [board[_row][column], board[_row - 1][column + 1], board[_row - 2][column + 2], board[_row - 3][column + 3]];\n          score += getWindowScore(diagonalWindow);\n        }\n        if (_row >= 3 && column >= 3) {\n          var _diagonalWindow = [board[_row][column], board[_row - 1][column - 1], board[_row - 2][column - 2], board[_row - 3][column - 3]];\n          score += getWindowScore(_diagonalWindow);\n        }\n      }\n    }\n    return score;\n  };\n  var minimax = function minimax(board, depth, maximizingPlayer) {\n    var humanPiece = 1;\n    var aiPiece = 2;\n    var availableColumns = checkAvailableColumns(board);\n    if (depth == 0 || checkWin(board, aiPiece) || checkWin(board, humanPiece) || availableColumns.length == 0) {\n      if (checkWin(board, aiPiece)) {\n        return {\n          score: 10000 - depth,\n          column: null\n        };\n      } else if (checkWin(board, humanPiece)) {\n        return {\n          score: -10000 + depth,\n          column: null\n        };\n      } else if (checkAvailableColumns(board).length == 0) {\n        return {\n          score: 0,\n          column: null\n        };\n      } else {\n        return evaluate(board);\n      }\n    }\n    if (maximizingPlayer) {\n      var bestScore = -Infinity;\n      var bestColumn = Math.floor(Math.random() * board.length);\n      for (var column of availableColumns) {\n        var emptyRow = getEmptyRow(column, board);\n        var boardCopy = board.map(function (row) {\n          return row.slice();\n        });\n        boardCopy[emptyRow][column] = aiPiece;\n        var currentScore = minimax(boardCopy, depth - 1, false).score;\n        if (currentScore > bestScore) {\n          bestScore = currentScore;\n          bestColumn = column;\n        }\n      }\n      return {\n        score: bestScore,\n        column: bestColumn\n      };\n    } else {\n      var _bestScore = Infinity;\n      var _bestColumn = Math.floor(Math.random() * board.length);\n      for (var _column of availableColumns) {\n        var _emptyRow = getEmptyRow(_column, board);\n        var _boardCopy = board.map(function (row) {\n          return row.slice();\n        });\n        _boardCopy[_emptyRow][_column] = humanPiece;\n        var _currentScore = minimax(_boardCopy, depth - 1, true).score;\n        if (_currentScore < _bestScore) {\n          _bestScore = _currentScore;\n          _bestColumn = _column;\n        }\n      }\n      return {\n        score: _bestScore,\n        column: _bestColumn\n      };\n    }\n  };\n  var aiTurn = function aiTurn() {\n    var dataCopy = data.map(function (row) {\n      return row.slice();\n    });\n    var bestMove = minimax(dataCopy, 4, true).column;\n    var emptyRow = getEmptyRow(bestMove, data);\n    placeDisc(emptyRow, bestMove, turn);\n    if (checkWin(data, turn) == true) {\n      setDisabled(true);\n      return;\n    }\n    if (checkAvailableColumns(data).length == 0) {\n      setTurn(0);\n      setDisabled(true);\n      return;\n    }\n    setTurn(1);\n  };\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return _jsx(View, {\n      style: styles.row,\n      children: item.map(function (cell, index) {\n        return _jsx(TouchableWithoutFeedback, {\n          disabled: disabled,\n          onPress: function onPress() {\n            return takeTurn(index);\n          },\n          children: _jsx(View, {\n            style: [styles.disc, {\n              backgroundColor: cell === 1 ? 'yellow' : cell === 2 ? 'red' : 'white'\n            }]\n          }, index)\n        }, index);\n      })\n    });\n  };\n  return _jsxs(View, {\n    children: [_jsxs(\"div\", {\n      style: styles.buttonWrapper,\n      children: [_jsx(\"button\", {\n        style: styles.restartButton,\n        onClick: function onClick() {\n          return restartGame();\n        },\n        children: \"Restart\"\n      }), _jsx(Text, {\n        style: styles.textTitle,\n        children: \"AI\"\n      }), _jsx(Switch, {\n        value: ai,\n        onValueChange: function onValueChange() {\n          setAi(!ai);\n          if (ai) {\n            restartGame();\n            window.alert(\"AI enabled! Game restarted. Now, an AI will play as the opponent.\");\n          } else {\n            restartGame();\n            window.alert(\"AI disabled! Game restarted. Now, a human will play as the opponent.\");\n          }\n        }\n      })]\n    }), _jsx(\"div\", {\n      style: styles.boardContainer,\n      children: _jsx(FlatList, {\n        data: data,\n        renderItem: renderItem,\n        keyExtractor: function keyExtractor(_, index) {\n          return \"row_\" + index + \"_column_\" + index;\n        }\n      })\n    })]\n  });\n};\nexport default Board;","map":{"version":3,"names":["React","useEffect","useState","View","Text","FlatList","TouchableWithoutFeedback","TouchableHighlight","Switch","StyleSheet","widthPercentageToDP","wp","heightPercentageToDP","hp","jsx","_jsx","jsxs","_jsxs","Board","_ref","data","setData","turn","setTurn","disabled","setDisabled","ai","setAi","_useState","_useState2","_slicedToArray","showAlert","setShowAlert","styles","create","buttonWrapper","display","flexDirection","alignItems","justifyContent","rowGap","margin","restartButton","height","width","fontSize","textTitle","fontWeight","color","boardContainer","backgroundColor","disc","borderRadius","row","flex","checkAvailableColumns","board","emptyCols","col","includes","push","getEmptyRow","column","placeDisc","emptyRow","player","newData","_toConsumableArray","prev","checkWin","takeTurn","console","log","availableCols","window","alert","length","restartGame","Array","fill","map","getWindowScore","score","item","evaluate","aiPiece","centerColumn","centerAiPieces","horizontalWindow","verticalWindow","diagonalWindow","minimax","depth","maximizingPlayer","humanPiece","availableColumns","bestScore","Infinity","bestColumn","Math","floor","random","boardCopy","slice","currentScore","aiTurn","dataCopy","bestMove","renderItem","_ref2","style","children","cell","index","onPress","onClick","value","onValueChange","keyExtractor","_"],"sources":["/usercode/connect4/components/Board.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { \n  View,\n  Text,\n  FlatList,\n  TouchableWithoutFeedback,\n  TouchableHighlight,\n  Switch,\n  StyleSheet\n} from 'react-native';\nimport { \n  widthPercentageToDP as wp,\n  heightPercentageToDP as hp\n} from 'react-native-responsive-screen';\n\nconst Board = ({ data, setData, turn, setTurn, disabled, setDisabled, ai, setAi }) => {\n\n  /*\n    Props\n    data => 2d array of 6 rows and 7 columns representing the state of the connect4 game board\n    setData => Method to update the data prop\n    turn => Integer representing whose turn it is, i.e., player 1, player 2, or AI\n    setTurn => Method to update the turn prop\n    disabled => Boolean to enable or disable the connect4 game board. Board is disabled once the game is over\n    setDisabled => Method to update the disabled prop\n    ai => Boolean representing whether the AI is playing or not. If false, it means player 2 is playing\n    setAi => Method to update the ai prop\n  */\n  const [showAlert, setShowAlert] = useState(false)\n\n  useEffect(() => {\n    // Write Task 11 code below this line\n  }, []);\n\n  const styles = StyleSheet.create({\n    buttonWrapper: {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-evenly',\n      rowGap: wp(10),\n      margin: wp(4),\n    },\n    restartButton: {\n      height: hp(6),\n      width: wp(20),\n      fontSize: wp(5),\n    },\n    textTitle: {\n        fontSize: wp(6),\n        fontWeight: 500,\n        color: '#268ec7',\n    },\n    boardContainer: {\n      height: 300,\n      width: 350,\n      backgroundColor: 'blue'\n    },\n    disc: {\n      height: 50,\n      width: 50,\n      borderRadius: wp(50)\n    },\n    row: {\n      flexDirection: 'row',\n      flex: 1,\n    },\n  })\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n  */\n  const checkAvailableColumns = (board) => {\n    const emptyCols = []\n    for(let row=0; row<6; row++){\n      for(let col=0; col<7; col++){\n        if(board[row][col] == null && !emptyCols.includes(col)) {\n          emptyCols.push(col)\n        }\n      }\n    }\n    return emptyCols\n  }\n\n  /*\n    Parameters\n    column => Integer between 0 and 6 (inclusive) representing column index of the connect4 game board\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n  */\n  const getEmptyRow = (column, board) => {\n    // Write Task 5 code below this line\n    for(let row=0; row<6; row++){\n      if(board[row][column] == null){\n        return row\n      }\n    }\n    return null\n  }\n\n  /*\n    Parameters\n    emptyRow => Integer representing row index having a value of null where disc can be placed\n    column => Integer between 0 and 6 (inclusive) representing column index of the connect4 game board\n    player => Integer representing 1 for player 1 and 2 for player 2 or AI\n  */\n  const placeDisc = (emptyRow, column, player) => {\n    const newData = [...prev]\n    newData[emptyRow][column] = player\n    setData(newData)\n  }\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n    player => Integer representing 1 for player 1 and 2 for player 2 or AI\n  */\n  const checkWin = (board, player) => {\n    // Write Task 6 code below this line\n    for(let row=0; row<6; row++){\n      for(let col=0; col<7; col++){\n        if(col<4 && board[row][col] === board[row][col+1] === board[row][col+2] === board[row][col+3] === player){\n          return true\n        }\n        if(row<3 && board[row][col] === board[row+1][col] === board[row+2][col] === board[row+3][col]=== player){\n          return true\n        }\n        if(row<3 && col<4 && board[row][col] === board[row+1][col+1] === board[row+2][col+2] === board[row+3][col+3] === player){\n          return true\n        }\n        if(row>2 && col>2 && board[row][col] === board[row-1][col-1] === board[row-2][col-2] === board[row-3][col-3] === player){\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n  /*\n    Parameters\n    column => Integer between 0 and 6 (inclusive) representing column index of the connect4 game board\n  */\n  const takeTurn = (column) => {\n    console.log('click on ', column)\n    // Write Task 7 code below this line\n    const availableCols = checkAvailableColumns(data)\n    if(!availableCols.includes(column)){\n      window.alert(\"This column is full! Select another one.\")\n      return\n    } \n    const emptyRow = getEmptyRow\n    if(emptyRow < 6){\n      placeDisc(emptyRow, column, turn)\n    }\n    if(checkWin(data, turn)) {\n      setDisabled(true)\n      return\n    }\n    if(checkAvailableColumns(data).length == 0){\n      setTurn(0)\n      setDisabled(true)\n      return\n    } else{\n      setTurn(turn == 1 ? 2 : 1)\n    }\n\n  }\n\n  const restartGame = () => {\n    // Write Task 8 code below this line\n    const newData = Array(6).fill(null).map(() => Array(7).fill(null));\n    setData(newData);\n    setTurn(1);\n    setDisabled(false);\n  }\n\n  /*\n    Parameters\n    window => An array of length 4 whose indices can have one of the following values: 1, 2, and null\n  */\n  const getWindowScore = (window) => {\n    // Write Task 9 code below this line\n    let score = 0\n    if(ai) {\n      window.map((item) => {\n        score = item === 2 ? score + 1 : score\n      })\n    }\n    return score\n  }\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n  */\n  const evaluate = (board) => {\n    const aiPiece = 2;\n    let score = 0;\n    // Center column score check\n    const centerColumn = 3;\n    let centerAiPieces = 0;\n    for (let row = 0; row <= 5; row++) {\n      if (board[row][centerColumn] == aiPiece)\n        centerAiPieces++;\n    }\n    score += (centerAiPieces * 3);\n    for (let row = 0; row <= 5; row++) {\n      for (let column = 0; column <= 6; column++) {\n        // Horizontal score check\n        if (column <= 3) {\n          const horizontalWindow = [board[row][column], board[row][column+1], board[row][column+2], board[row][column+3]];\n          score += getWindowScore(horizontalWindow);\n        }\n        // Vertical score check\n        if (row <= 2) {\n          const verticalWindow = [board[row][column], board[row+1][column], board[row+2][column], board[row+3][column]];\n          score += getWindowScore(verticalWindow);\n        }\n        // Positive diagonals score check\n        if (row >= 3 && column <= 3) {\n          const diagonalWindow = [board[row][column], board[row-1][column+1], board[row-2][column+2], board[row-3][column+3]];\n          score += getWindowScore(diagonalWindow);\n        }\n        // Negative diagonals score check\n        if (row >= 3 && column >= 3) {\n          const diagonalWindow = [board[row][column], board[row-1][column-1], board[row-2][column-2], board[row-3][column-3]];\n          score += getWindowScore(diagonalWindow);\n        }\n      }\n    }\n    return score;\n  }\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n    depth => Integer representing the recursion depth. Can have values 1 and greater than 1\n    maximizingPlayer => Boolean value representing whether the player is maximizing or not\n  */\n  const minimax = (board, depth, maximizingPlayer) => {\n    const humanPiece = 1;\n    const aiPiece = 2;\n    const availableColumns = checkAvailableColumns(board);\n    // base recursion case. Stop if depth is 0, AI wins, human wins, or it is a draw\n    if (depth == 0 || checkWin(board, aiPiece) || checkWin(board, humanPiece) || availableColumns.length == 0) {\n      if (checkWin(board, aiPiece)) {\n        return { score: 10000 - depth, column: null };\n      }\n      else if (checkWin(board, humanPiece)) {\n        return { score: -10000 + depth, column: null };\n      }\n      else if (checkAvailableColumns(board).length == 0) {\n        return { score: 0, column: null };\n      }\n      else {\n        return evaluate(board); // how close is AI to winning or losing and return points accordingly\n      }\n    }\n    // maximizing player\n    if (maximizingPlayer) {\n      let bestScore = -Infinity;\n      let bestColumn = Math.floor(Math.random() * board.length);\n      for (const column of availableColumns) {\n        const emptyRow = getEmptyRow(column, board);\n        let boardCopy = board.map(row => row.slice());\n        boardCopy[emptyRow][column] = aiPiece;\n        let currentScore = minimax(boardCopy, depth - 1, false).score;\n        if (currentScore > bestScore) {\n          bestScore = currentScore;\n          bestColumn = column;\n        }\n      }\n      return { score: bestScore, column: bestColumn };\n    }\n    // minimizing player\n    else {\n      let bestScore = Infinity;\n      let bestColumn = Math.floor(Math.random() * board.length);\n      for (const column of availableColumns) {\n        const emptyRow = getEmptyRow(column, board);\n        let boardCopy = board.map(row => row.slice());\n        boardCopy[emptyRow][column] = humanPiece;\n        let currentScore = minimax(boardCopy, depth - 1, true).score;\n        if (currentScore < bestScore) {\n          bestScore = currentScore;\n          bestColumn = column;\n        }\n      }\n      return { score: bestScore, column: bestColumn };\n    }\n  }\n\n  const aiTurn = () => {\n    let dataCopy = data.map(row => row.slice());\n    const bestMove = minimax(dataCopy, 4, true).column;\n    const emptyRow = getEmptyRow(bestMove, data);\n    placeDisc(emptyRow, bestMove, turn);\n    if (checkWin(data, turn) == true) {\n      setDisabled(true);\n      return;\n    }\n    if (checkAvailableColumns(data).length == 0) {\n      setTurn(0);\n      setDisabled(true);\n      return;\n    }\n    setTurn(1);\n  }\n\n  // Write Task 2 and Task 3 code below this line\n\n  const renderItem = ({ item }) => (\n    <View style={styles.row}>\n      {item.map((cell, index) => (\n        <TouchableWithoutFeedback disabled={disabled} onPress={() => takeTurn(index)} key={index}>\n          <View key={index} style={[styles.disc, {backgroundColor: cell === 1 ? 'yellow' : cell === 2 ? 'red' : 'white' }]} />\n        </TouchableWithoutFeedback>\n        \n      ))}\n    </View>\n  );\n\n  return (\n    <View>\n      <div style={styles.buttonWrapper}>\n      <button style={styles.restartButton} onClick={()=>restartGame()}>Restart</button>\n      <Text style={styles.textTitle}>AI</Text> \n      <Switch \n        value={ai} \n        onValueChange={() => {\n          setAi(!ai)\n          if(ai){\n            restartGame()\n            window.alert(\"AI enabled! Game restarted. Now, an AI will play as the opponent.\")\n          } else{\n            restartGame()\n            window.alert(\"AI disabled! Game restarted. Now, a human will play as the opponent.\")\n          }\n        }} \n      />\n      </div>\n\n      <div style={styles.boardContainer}>\n\n      <FlatList \n        data={data}\n        renderItem={renderItem}\n        keyExtractor={(_, index) => `row_${index}_column_${index}`}\n      />\n      </div>\n      \n    </View>\n  );\n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}