{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { widthPercentageToDP as wp, heightPercentageToDP as hp } from 'react-native-responsive-screen';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Board = function Board(_ref) {\n  var data = _ref.data,\n    setData = _ref.setData,\n    turn = _ref.turn,\n    setTurn = _ref.setTurn,\n    disabled = _ref.disabled,\n    setDisabled = _ref.setDisabled,\n    ai = _ref.ai,\n    setAi = _ref.setAi;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    switchToggle = _useState2[0],\n    setSwitchToggle = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showAlert = _useState4[0],\n    setShowAlert = _useState4[1];\n  useEffect(function () {}, []);\n  var styles = StyleSheet.create({\n    buttonWrapper: {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-evenly',\n      rowGap: wp(10),\n      margin: wp(4)\n    },\n    restartButton: {\n      height: hp(6),\n      width: wp(20),\n      fontSize: wp(5)\n    },\n    textTitle: {\n      fontSize: wp(6),\n      fontWeight: 500,\n      color: '#268ec7'\n    },\n    boardContainer: {\n      height: 300,\n      width: 350,\n      backgroundColor: 'blue'\n    },\n    disc: {\n      height: 50,\n      width: 50,\n      borderRadius: wp(50)\n    },\n    row: {\n      flexDirection: 'row',\n      flex: 1\n    }\n  });\n  var checkAvailableColumns = function checkAvailableColumns(board) {\n    var emptyCols = [];\n    for (var row = 0; row < 6; row++) {\n      for (col = 0; col < 7; col++) {\n        if (board[row][col] == null && !emptyCols.includes(col)) {\n          emptyCols.push(col);\n        }\n      }\n    }\n    return emptyCols;\n  };\n  var getEmptyRow = function getEmptyRow(column, board) {\n    for (var row = 0; row < 6; row++) {\n      if (board[row][column] == null) {\n        return row;\n      }\n    }\n  };\n  var placeDisc = function placeDisc(emptyRow, column, player) {\n    var newData = _toConsumableArray(prev);\n    newData[emptyRow][column] = player;\n    setData(newData);\n  };\n  var checkWin = function checkWin(board, player) {\n    for (var row = 0; row < 6; row++) {\n      for (var _col = 0; _col < 7; _col++) {\n        if (board[row][_col] === board[row][_col + 1] === board[row][_col + 2] === board[row][_col + 3]) {\n          return true;\n        }\n        if (board[row][_col] === board[row + 1][_col] === board[row + 2][_col] === board[row + 3][_col]) {\n          return true;\n        }\n        if (board[row][_col] === board[row + 1][_col + 1] === board[row + 2][_col + 2] === board[row + 3][_col + 3]) {\n          return true;\n        }\n        if (board[row][_col] === board[row - 1][_col - 1] === board[row - 2][_col - 2] === board[row - 3][_col - 3]) {\n          return true;\n        }\n      }\n    }\n  };\n  var takeTurn = function takeTurn(column) {\n    console.log('click on ', column);\n  };\n  var restartGame = function restartGame() {};\n  var getWindowScore = function getWindowScore(window) {};\n  var evaluate = function evaluate(board) {};\n  var minimax = function minimax(board, depth, maximizingPlayer) {};\n  var aiTurn = function aiTurn() {};\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return _jsx(View, {\n      style: styles.row,\n      children: item.map(function (cell, index) {\n        return _jsx(TouchableWithoutFeedback, {\n          disabled: disabled,\n          onPress: function onPress() {\n            return takeTurn(index);\n          },\n          children: _jsx(View, {\n            style: [styles.disc, {\n              backgroundColor: cell === 1 ? 'yellow' : cell === 2 ? 'red' : 'white'\n            }]\n          }, index)\n        }, index);\n      })\n    });\n  };\n  return _jsxs(View, {\n    children: [_jsxs(\"div\", {\n      style: styles.buttonWrapper,\n      children: [_jsx(\"button\", {\n        style: styles.restartButton,\n        onClick: restartGame(),\n        children: \"Restart\"\n      }), _jsx(Text, {\n        style: styles.textTitle,\n        children: \"AI\"\n      }), _jsx(Switch, {\n        value: switchToggle,\n        onValueChange: function onValueChange(value) {\n          setSwitchToggle(value);\n          setAi(value);\n          setShowAlert(true);\n          restartGame();\n        }\n      })]\n    }), showAlert && (switchToggle ? window.alert(\"AI enabled! Game restarted. Now, an AI will play as the opponent.\") : window.alert(\"AI disabled! Game restarted. Now, a human will play as the opponent.\")), _jsx(\"div\", {\n      style: styles.boardContainer,\n      children: _jsx(FlatList, {\n        data: data,\n        renderItem: renderItem,\n        keyExtractor: function keyExtractor(_, index) {\n          return \"row_\" + index + \"_column_\" + index;\n        }\n      })\n    })]\n  });\n};\nexport default Board;","map":{"version":3,"names":["React","useEffect","useState","View","Text","FlatList","TouchableWithoutFeedback","TouchableHighlight","Switch","StyleSheet","widthPercentageToDP","wp","heightPercentageToDP","hp","jsx","_jsx","jsxs","_jsxs","Board","_ref","data","setData","turn","setTurn","disabled","setDisabled","ai","setAi","_useState","_useState2","_slicedToArray","switchToggle","setSwitchToggle","_useState3","_useState4","showAlert","setShowAlert","styles","create","buttonWrapper","display","flexDirection","alignItems","justifyContent","rowGap","margin","restartButton","height","width","fontSize","textTitle","fontWeight","color","boardContainer","backgroundColor","disc","borderRadius","row","flex","checkAvailableColumns","board","emptyCols","col","includes","push","getEmptyRow","column","placeDisc","emptyRow","player","newData","_toConsumableArray","prev","checkWin","takeTurn","console","log","restartGame","getWindowScore","window","evaluate","minimax","depth","maximizingPlayer","aiTurn","renderItem","_ref2","item","style","children","map","cell","index","onPress","onClick","value","onValueChange","alert","keyExtractor","_"],"sources":["/usercode/connect4/components/Board.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { \n  View,\n  Text,\n  FlatList,\n  TouchableWithoutFeedback,\n  TouchableHighlight,\n  Switch,\n  StyleSheet\n} from 'react-native';\nimport { \n  widthPercentageToDP as wp,\n  heightPercentageToDP as hp\n} from 'react-native-responsive-screen';\n\nconst Board = ({ data, setData, turn, setTurn, disabled, setDisabled, ai, setAi }) => {\n\n  /*\n    Props\n    data => 2d array of 6 rows and 7 columns representing the state of the connect4 game board\n    setData => Method to update the data prop\n    turn => Integer representing whose turn it is, i.e., player 1, player 2, or AI\n    setTurn => Method to update the turn prop\n    disabled => Boolean to enable or disable the connect4 game board. Board is disabled once the game is over\n    setDisabled => Method to update the disabled prop\n    ai => Boolean representing whether the AI is playing or not. If false, it means player 2 is playing\n    setAi => Method to update the ai prop\n  */\n\n    const [switchToggle, setSwitchToggle] = useState(false)\n    const [showAlert, setShowAlert] = useState(false)\n\n  useEffect(() => {\n    // Write Task 11 code below this line\n  }, []);\n\n  const styles = StyleSheet.create({\n    buttonWrapper: {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-evenly',\n      rowGap: wp(10),\n      margin: wp(4),\n    },\n    restartButton: {\n      height: hp(6),\n      width: wp(20),\n      fontSize: wp(5),\n    },\n    textTitle: {\n        fontSize: wp(6),\n        fontWeight: 500,\n        color: '#268ec7',\n    },\n    boardContainer: {\n      height: 300,\n      width: 350,\n      backgroundColor: 'blue'\n    },\n    disc: {\n      height: 50,\n      width: 50,\n      borderRadius: wp(50)\n    },\n    row: {\n      flexDirection: 'row',\n      flex: 1,\n    },\n  })\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n  */\n  const checkAvailableColumns = (board) => {\n    const emptyCols = []\n    for(let row=0; row<6; row++){\n      for(col=0; col<7; col++){\n        if(board[row][col] == null && !emptyCols.includes(col)) {\n          emptyCols.push(col)\n        }\n      }\n    }\n    return emptyCols\n  }\n\n  /*\n    Parameters\n    column => Integer between 0 and 6 (inclusive) representing column index of the connect4 game board\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n  */\n  const getEmptyRow = (column, board) => {\n    // Write Task 5 code below this line\n    for(let row=0; row<6; row++){\n      if(board[row][column] == null){\n        return row\n      }\n    }\n  }\n\n  /*\n    Parameters\n    emptyRow => Integer representing row index having a value of null where disc can be placed\n    column => Integer between 0 and 6 (inclusive) representing column index of the connect4 game board\n    player => Integer representing 1 for player 1 and 2 for player 2 or AI\n  */\n  const placeDisc = (emptyRow, column, player) => {\n    const newData = [...prev]\n    newData[emptyRow][column] = player\n    setData(newData)\n  }\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n    player => Integer representing 1 for player 1 and 2 for player 2 or AI\n  */\n  const checkWin = (board, player) => {\n    // Write Task 6 code below this line\n    for(let row=0; row<6; row++){\n      for(let col=0; col<7; col++){\n        if(board[row][col] === board[row][col+1] === board[row][col+2] === board[row][col+3]){\n          return true\n        }\n        if(board[row][col] === board[row+1][col] === board[row+2][col] === board[row+3][col]){\n          return true\n        }\n        if(board[row][col] === board[row+1][col+1] === board[row+2][col+2] === board[row+3][col+3]){\n          return true\n        }\n        if(board[row][col] === board[row-1][col-1] === board[row-2][col-2] === board[row-3][col-3]){\n          return true\n        }\n      }\n    }\n\n  }\n\n  /*\n    Parameters\n    column => Integer between 0 and 6 (inclusive) representing column index of the connect4 game board\n  */\n  const takeTurn = (column) => {\n    console.log('click on ', column)\n    // Write Task 7 code below this line\n  }\n\n  const restartGame = () => {\n    // Write Task 8 code below this line\n  }\n\n  /*\n    Parameters\n    window => An array of length 4 whose indices can have one of the following values: 1, 2, and null\n  */\n  const getWindowScore = (window) => {\n    // Write Task 9 code below this line\n  }\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n  */\n  const evaluate = (board) => {\n    // Write Task 9 code below this line\n  }\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n    depth => Integer representing the recursion depth. Can have values 1 and greater than 1\n    maximizingPlayer => Boolean value representing whether the player is maximizing or not\n  */\n  const minimax = (board, depth, maximizingPlayer) => {\n    // Write Task 10 code below this line\n  }\n\n  const aiTurn = () => {\n    // Write Task 11 code below this line\n  }\n\n  // Write Task 2 and Task 3 code below this line\n\n  const renderItem = ({ item }) => (\n    <View style={styles.row}>\n      {item.map((cell, index) => (\n        <TouchableWithoutFeedback disabled={disabled} onPress={() => takeTurn(index)} key={index}>\n          <View key={index} style={[styles.disc, {backgroundColor: cell === 1 ? 'yellow' : cell === 2 ? 'red' : 'white' }]} />\n        </TouchableWithoutFeedback>\n        \n      ))}\n    </View>\n  );\n\n  return (\n    <View>\n      <div style={styles.buttonWrapper}>\n      <button style={styles.restartButton} onClick={restartGame()}>Restart</button>\n      <Text style={styles.textTitle}>AI</Text> \n      <Switch \n        value={switchToggle} \n        onValueChange={(value) => {\n          setSwitchToggle(value)\n          setAi(value)\n          setShowAlert(true)\n          restartGame()\n        }} \n      />\n      </div>\n      {showAlert && (\n        switchToggle ? window.alert(\"AI enabled! Game restarted. Now, an AI will play as the opponent.\") : window.alert(\"AI disabled! Game restarted. Now, a human will play as the opponent.\")\n      )}\n\n      <div style={styles.boardContainer}>\n\n      <FlatList \n        data={data}\n        renderItem={renderItem}\n        keyExtractor={(_, index) => `row_${index}_column_${index}`}\n      />\n      </div>\n      \n    </View>\n  );\n};\n\nexport default Board;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,wBAAA;AAAA,OAAAC,kBAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,UAAA;AAUnD,SACEC,mBAAmB,IAAIC,EAAE,EACzBC,oBAAoB,IAAIC,EAAE,QACrB,gCAAgC;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAExC,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAAC,IAAA,EAA2E;EAAA,IAArEC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IAAEC,OAAO,GAAAF,IAAA,CAAPE,OAAO;IAAEC,IAAI,GAAAH,IAAA,CAAJG,IAAI;IAAEC,OAAO,GAAAJ,IAAA,CAAPI,OAAO;IAAEC,QAAQ,GAAAL,IAAA,CAARK,QAAQ;IAAEC,WAAW,GAAAN,IAAA,CAAXM,WAAW;IAAEC,EAAE,GAAAP,IAAA,CAAFO,EAAE;IAAEC,KAAK,GAAAR,IAAA,CAALQ,KAAK;EAc3E,IAAAC,SAAA,GAAwC1B,QAAQ,CAAC,KAAK,CAAC;IAAA2B,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAhDG,YAAY,GAAAF,UAAA;IAAEG,eAAe,GAAAH,UAAA;EACpC,IAAAI,UAAA,GAAkC/B,QAAQ,CAAC,KAAK,CAAC;IAAAgC,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAA1CE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAEhCjC,SAAS,CAAC,YAAM,CAEhB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMoC,MAAM,GAAG5B,UAAU,CAAC6B,MAAM,CAAC;IAC/BC,aAAa,EAAE;MACbC,OAAO,EAAE,MAAM;MACfC,aAAa,EAAE,KAAK;MACpBC,UAAU,EAAE,QAAQ;MACpBC,cAAc,EAAE,cAAc;MAC9BC,MAAM,EAAEjC,EAAE,CAAC,EAAE,CAAC;MACdkC,MAAM,EAAElC,EAAE,CAAC,CAAC;IACd,CAAC;IACDmC,aAAa,EAAE;MACbC,MAAM,EAAElC,EAAE,CAAC,CAAC,CAAC;MACbmC,KAAK,EAAErC,EAAE,CAAC,EAAE,CAAC;MACbsC,QAAQ,EAAEtC,EAAE,CAAC,CAAC;IAChB,CAAC;IACDuC,SAAS,EAAE;MACPD,QAAQ,EAAEtC,EAAE,CAAC,CAAC,CAAC;MACfwC,UAAU,EAAE,GAAG;MACfC,KAAK,EAAE;IACX,CAAC;IACDC,cAAc,EAAE;MACdN,MAAM,EAAE,GAAG;MACXC,KAAK,EAAE,GAAG;MACVM,eAAe,EAAE;IACnB,CAAC;IACDC,IAAI,EAAE;MACJR,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTQ,YAAY,EAAE7C,EAAE,CAAC,EAAE;IACrB,CAAC;IACD8C,GAAG,EAAE;MACHhB,aAAa,EAAE,KAAK;MACpBiB,IAAI,EAAE;IACR;EACF,CAAC,CAAC;EAMF,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIC,KAAK,EAAK;IACvC,IAAMC,SAAS,GAAG,EAAE;IACpB,KAAI,IAAIJ,GAAG,GAAC,CAAC,EAAEA,GAAG,GAAC,CAAC,EAAEA,GAAG,EAAE,EAAC;MAC1B,KAAIK,GAAG,GAAC,CAAC,EAAEA,GAAG,GAAC,CAAC,EAAEA,GAAG,EAAE,EAAC;QACtB,IAAGF,KAAK,CAACH,GAAG,CAAC,CAACK,GAAG,CAAC,IAAI,IAAI,IAAI,CAACD,SAAS,CAACE,QAAQ,CAACD,GAAG,CAAC,EAAE;UACtDD,SAAS,CAACG,IAAI,CAACF,GAAG,CAAC;QACrB;MACF;IACF;IACA,OAAOD,SAAS;EAClB,CAAC;EAOD,IAAMI,WAAW,GAAG,SAAdA,WAAWA,CAAIC,MAAM,EAAEN,KAAK,EAAK;IAErC,KAAI,IAAIH,GAAG,GAAC,CAAC,EAAEA,GAAG,GAAC,CAAC,EAAEA,GAAG,EAAE,EAAC;MAC1B,IAAGG,KAAK,CAACH,GAAG,CAAC,CAACS,MAAM,CAAC,IAAI,IAAI,EAAC;QAC5B,OAAOT,GAAG;MACZ;IACF;EACF,CAAC;EAQD,IAAMU,SAAS,GAAG,SAAZA,SAASA,CAAIC,QAAQ,EAAEF,MAAM,EAAEG,MAAM,EAAK;IAC9C,IAAMC,OAAO,GAAAC,kBAAA,CAAOC,IAAI,CAAC;IACzBF,OAAO,CAACF,QAAQ,CAAC,CAACF,MAAM,CAAC,GAAGG,MAAM;IAClChD,OAAO,CAACiD,OAAO,CAAC;EAClB,CAAC;EAOD,IAAMG,QAAQ,GAAG,SAAXA,QAAQA,CAAIb,KAAK,EAAES,MAAM,EAAK;IAElC,KAAI,IAAIZ,GAAG,GAAC,CAAC,EAAEA,GAAG,GAAC,CAAC,EAAEA,GAAG,EAAE,EAAC;MAC1B,KAAI,IAAIK,IAAG,GAAC,CAAC,EAAEA,IAAG,GAAC,CAAC,EAAEA,IAAG,EAAE,EAAC;QAC1B,IAAGF,KAAK,CAACH,GAAG,CAAC,CAACK,IAAG,CAAC,KAAKF,KAAK,CAACH,GAAG,CAAC,CAACK,IAAG,GAAC,CAAC,CAAC,KAAKF,KAAK,CAACH,GAAG,CAAC,CAACK,IAAG,GAAC,CAAC,CAAC,KAAKF,KAAK,CAACH,GAAG,CAAC,CAACK,IAAG,GAAC,CAAC,CAAC,EAAC;UACnF,OAAO,IAAI;QACb;QACA,IAAGF,KAAK,CAACH,GAAG,CAAC,CAACK,IAAG,CAAC,KAAKF,KAAK,CAACH,GAAG,GAAC,CAAC,CAAC,CAACK,IAAG,CAAC,KAAKF,KAAK,CAACH,GAAG,GAAC,CAAC,CAAC,CAACK,IAAG,CAAC,KAAKF,KAAK,CAACH,GAAG,GAAC,CAAC,CAAC,CAACK,IAAG,CAAC,EAAC;UACnF,OAAO,IAAI;QACb;QACA,IAAGF,KAAK,CAACH,GAAG,CAAC,CAACK,IAAG,CAAC,KAAKF,KAAK,CAACH,GAAG,GAAC,CAAC,CAAC,CAACK,IAAG,GAAC,CAAC,CAAC,KAAKF,KAAK,CAACH,GAAG,GAAC,CAAC,CAAC,CAACK,IAAG,GAAC,CAAC,CAAC,KAAKF,KAAK,CAACH,GAAG,GAAC,CAAC,CAAC,CAACK,IAAG,GAAC,CAAC,CAAC,EAAC;UACzF,OAAO,IAAI;QACb;QACA,IAAGF,KAAK,CAACH,GAAG,CAAC,CAACK,IAAG,CAAC,KAAKF,KAAK,CAACH,GAAG,GAAC,CAAC,CAAC,CAACK,IAAG,GAAC,CAAC,CAAC,KAAKF,KAAK,CAACH,GAAG,GAAC,CAAC,CAAC,CAACK,IAAG,GAAC,CAAC,CAAC,KAAKF,KAAK,CAACH,GAAG,GAAC,CAAC,CAAC,CAACK,IAAG,GAAC,CAAC,CAAC,EAAC;UACzF,OAAO,IAAI;QACb;MACF;IACF;EAEF,CAAC;EAMD,IAAMY,QAAQ,GAAG,SAAXA,QAAQA,CAAIR,MAAM,EAAK;IAC3BS,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEV,MAAM,CAAC;EAElC,CAAC;EAED,IAAMW,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS,CAE1B,CAAC;EAMD,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,MAAM,EAAK,CAEnC,CAAC;EAMD,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIpB,KAAK,EAAK,CAE5B,CAAC;EAQD,IAAMqB,OAAO,GAAG,SAAVA,OAAOA,CAAIrB,KAAK,EAAEsB,KAAK,EAAEC,gBAAgB,EAAK,CAEpD,CAAC;EAED,IAAMC,MAAM,GAAG,SAATA,MAAMA,CAAA,EAAS,CAErB,CAAC;EAID,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAAC,KAAA;IAAA,IAAMC,IAAI,GAAAD,KAAA,CAAJC,IAAI;IAAA,OACxBxE,IAAA,CAACZ,IAAI;MAACqF,KAAK,EAAEnD,MAAM,CAACoB,GAAI;MAAAgC,QAAA,EACrBF,IAAI,CAACG,GAAG,CAAC,UAACC,IAAI,EAAEC,KAAK;QAAA,OACpB7E,IAAA,CAACT,wBAAwB;UAACkB,QAAQ,EAAEA,QAAS;UAACqE,OAAO,EAAE,SAAAA,QAAA;YAAA,OAAMnB,QAAQ,CAACkB,KAAK,CAAC;UAAA,CAAC;UAAAH,QAAA,EAC3E1E,IAAA,CAACZ,IAAI;YAAaqF,KAAK,EAAE,CAACnD,MAAM,CAACkB,IAAI,EAAE;cAACD,eAAe,EAAEqC,IAAI,KAAK,CAAC,GAAG,QAAQ,GAAGA,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG;YAAQ,CAAC;UAAE,GAAtGC,KAAwG;QAAC,GADnCA,KAEzD,CAAC;MAAA,CAE5B;IAAC,CACE,CAAC;EAAA,CACR;EAED,OACE3E,KAAA,CAACd,IAAI;IAAAsF,QAAA,GACHxE,KAAA;MAAKuE,KAAK,EAAEnD,MAAM,CAACE,aAAc;MAAAkD,QAAA,GACjC1E,IAAA;QAAQyE,KAAK,EAAEnD,MAAM,CAACS,aAAc;QAACgD,OAAO,EAAEjB,WAAW,CAAC,CAAE;QAAAY,QAAA,EAAC;MAAO,CAAQ,CAAC,EAC7E1E,IAAA,CAACX,IAAI;QAACoF,KAAK,EAAEnD,MAAM,CAACa,SAAU;QAAAuC,QAAA,EAAC;MAAE,CAAM,CAAC,EACxC1E,IAAA,CAACP,MAAM;QACLuF,KAAK,EAAEhE,YAAa;QACpBiE,aAAa,EAAE,SAAAA,cAACD,KAAK,EAAK;UACxB/D,eAAe,CAAC+D,KAAK,CAAC;UACtBpE,KAAK,CAACoE,KAAK,CAAC;UACZ3D,YAAY,CAAC,IAAI,CAAC;UAClByC,WAAW,CAAC,CAAC;QACf;MAAE,CACH,CAAC;IAAA,CACG,CAAC,EACL1C,SAAS,KACRJ,YAAY,GAAGgD,MAAM,CAACkB,KAAK,CAAC,mEAAmE,CAAC,GAAGlB,MAAM,CAACkB,KAAK,CAAC,sEAAsE,CAAC,CACxL,EAEDlF,IAAA;MAAKyE,KAAK,EAAEnD,MAAM,CAACgB,cAAe;MAAAoC,QAAA,EAElC1E,IAAA,CAACV,QAAQ;QACPe,IAAI,EAAEA,IAAK;QACXiE,UAAU,EAAEA,UAAW;QACvBa,YAAY,EAAE,SAAAA,aAACC,CAAC,EAAEP,KAAK;UAAA,gBAAYA,KAAK,gBAAWA,KAAK;QAAA;MAAG,CAC5D;IAAC,CACG,CAAC;EAAA,CAEF,CAAC;AAEX,CAAC;AAED,eAAe1E,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}