{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React, { useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { widthPercentageToDP as wp, heightPercentageToDP as hp } from 'react-native-responsive-screen';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Board = function Board(_ref) {\n  var data = _ref.data,\n    setData = _ref.setData,\n    turn = _ref.turn,\n    setTurn = _ref.setTurn,\n    disabled = _ref.disabled,\n    setDisabled = _ref.setDisabled,\n    ai = _ref.ai,\n    setAi = _ref.setAi;\n  useEffect(function () {\n    if (ai == true && turn == 2) {\n      var timer = setTimeout(function () {\n        aiTurn();\n      }, 2000);\n      return function () {\n        return clearTimeout(timer);\n      };\n    }\n  }, [turn]);\n  var checkAvailableColumns = function checkAvailableColumns(board) {\n    var availableColumns = [];\n    for (var column = 0; column <= 6; column++) {\n      for (var row = 5; row >= 0; row--) {\n        if (board[row][column] == null) {\n          availableColumns.push(column);\n          break;\n        }\n      }\n    }\n    return availableColumns;\n  };\n  var getEmptyRow = function getEmptyRow(column, board) {\n    var row = 5;\n    while (row >= 0) {\n      if (board[row][column] == null) return row;\n      row = row - 1;\n    }\n  };\n  var placeCircle = function placeCircle(emptyRow, column, player) {\n    var dataCopy = _toConsumableArray(data);\n    dataCopy[emptyRow][column] = player;\n    setData(dataCopy);\n  };\n  var checkWin = function checkWin(board, player) {\n    for (var row = 0; row <= 5; row++) for (var column = 0; column <= 3; column++) if (board[row][column] == player && board[row][column + 1] == player && board[row][column + 2] == player && board[row][column + 3] == player) return true;\n    for (var _row = 0; _row <= 2; _row++) for (var _column = 0; _column <= 6; _column++) if (board[_row][_column] == player && board[_row + 1][_column] == player && board[_row + 2][_column] == player && board[_row + 3][_column] == player) return true;\n    for (var _row2 = 3; _row2 <= 5; _row2++) for (var _column2 = 0; _column2 <= 3; _column2++) if (board[_row2][_column2] == player && board[_row2 - 1][_column2 + 1] == player && board[_row2 - 2][_column2 + 2] == player && board[_row2 - 3][_column2 + 3] == player) return true;\n    for (var _row3 = 3; _row3 <= 5; _row3++) for (var _column3 = 6; _column3 >= 3; _column3--) if (board[_row3][_column3] == player && board[_row3 - 1][_column3 - 1] == player && board[_row3 - 2][_column3 - 2] == player && board[_row3 - 3][_column3 - 3] == player) return true;\n    return false;\n  };\n  var restartGame = function restartGame() {\n    var dataCopy = _toConsumableArray(data);\n    for (var row = 0; row < 6; row++) for (var column = 0; column < 7; column++) {\n      dataCopy[row][column] = null;\n    }\n    setData(dataCopy);\n    setTurn(1);\n    setDisabled(false);\n  };\n  var takeTurn = function takeTurn(column) {\n    var availableColumns = checkAvailableColumns(data);\n    if (!availableColumns.includes(column)) {\n      window.alert(\"This column is full! Select another one.\");\n      return;\n    }\n    var emptyRow = getEmptyRow(column, data);\n    placeCircle(emptyRow, column, turn);\n    if (checkWin(data, turn) == true) {\n      setDisabled(true);\n      return;\n    }\n    if (checkAvailableColumns(data).length == 0) {\n      setTurn(0);\n      setDisabled(true);\n      return;\n    }\n    turn == 1 ? setTurn(2) : setTurn(1);\n  };\n  var aiTurn = function aiTurn() {\n    var dataCopy = data.map(function (row) {\n      return row.slice();\n    });\n    var bestMove = minimax(dataCopy, 4, true).column;\n    var emptyRow = getEmptyRow(bestMove, data);\n    placeCircle(emptyRow, bestMove, turn);\n    if (checkWin(data, turn) == true) {\n      setDisabled(true);\n      return;\n    }\n    if (checkAvailableColumns(data).length == 0) {\n      setTurn(0);\n      setDisabled(true);\n      return;\n    }\n    setTurn(1);\n  };\n  var getWindowScore = function getWindowScore(window) {\n    var humanPiece = 1;\n    var aiPiece = 2;\n    var score = 0;\n    if (window.filter(function (p) {\n      return p == aiPiece;\n    }).length == 3 && window.filter(function (p) {\n      return p == null;\n    }).length == 1) {\n      score = score + 5;\n    } else if (window.filter(function (p) {\n      return p == aiPiece;\n    }).length == 2 && window.filter(function (p) {\n      return p == null;\n    }).length == 2) {\n      score = score + 2;\n    }\n    if (window.filter(function (p) {\n      return p == humanPiece;\n    }).length == 3 && window.filter(function (p) {\n      return p == null;\n    }).length == 1) {\n      score = score - 4;\n    }\n    return score;\n  };\n  var evaluate = function evaluate(board) {\n    var aiPiece = 2;\n    var score = 0;\n    var centerColumn = 3;\n    var centerAiPieces = 0;\n    for (var row = 0; row <= 5; row++) {\n      if (board[row][centerColumn] == aiPiece) centerAiPieces++;\n    }\n    score += centerAiPieces * 3;\n    for (var _row4 = 0; _row4 <= 5; _row4++) {\n      for (var column = 0; column <= 3; column++) {\n        var horizontalWindow = [board[_row4][column], board[_row4][column + 1], board[_row4][column + 2], board[_row4][column + 3]];\n        score += getWindowScore(horizontalWindow);\n      }\n    }\n    for (var _row5 = 0; _row5 <= 2; _row5++) {\n      for (var _column4 = 0; _column4 <= 6; _column4++) {\n        var verticalWindow = [board[_row5][_column4], board[_row5 + 1][_column4], board[_row5 + 2][_column4], board[_row5 + 3][_column4]];\n        score += getWindowScore(verticalWindow);\n      }\n    }\n    for (var _row6 = 3; _row6 <= 5; _row6++) {\n      for (var _column5 = 0; _column5 <= 3; _column5++) {\n        var diagonalWindow = [board[_row6][_column5], board[_row6 - 1][_column5 + 1], board[_row6 - 2][_column5 + 2], board[_row6 - 3][_column5 + 3]];\n        score += getWindowScore(diagonalWindow);\n      }\n    }\n    for (var _row7 = 3; _row7 <= 5; _row7++) {\n      for (var _column6 = 6; _column6 >= 3; _column6--) {\n        var _diagonalWindow = [board[_row7][_column6], board[_row7 - 1][_column6 - 1], board[_row7 - 2][_column6 - 2], board[_row7 - 3][_column6 - 3]];\n        score += getWindowScore(_diagonalWindow);\n      }\n    }\n    return score;\n  };\n  var minimax = function minimax(board, depth, maximizingPlayer) {\n    var humanPiece = 1;\n    var aiPiece = 2;\n    var availableColumns = checkAvailableColumns(board);\n    if (depth == 0 || checkWin(board, aiPiece) || checkWin(board, humanPiece) || availableColumns.length == 0) {\n      if (checkWin(board, aiPiece)) {\n        return {\n          score: 10000,\n          column: null\n        };\n      } else if (checkWin(board, humanPiece)) {\n        return {\n          score: -10000,\n          column: null\n        };\n      } else if (checkAvailableColumns(board).length == 0) {\n        return {\n          score: 0,\n          column: null\n        };\n      } else {\n        return evaluate(board);\n      }\n    }\n    if (maximizingPlayer) {\n      var bestScore = -Infinity;\n      var bestColumn = Math.floor(Math.random() * board.length);\n      for (var column of availableColumns) {\n        var emptyRow = getEmptyRow(column, board);\n        var boardCopy = board.map(function (row) {\n          return row.slice();\n        });\n        boardCopy[emptyRow][column] = aiPiece;\n        var currentScore = minimax(boardCopy, depth - 1, false).score;\n        if (currentScore > bestScore) {\n          bestScore = currentScore;\n          bestColumn = column;\n        }\n      }\n      return {\n        score: bestScore,\n        column: bestColumn\n      };\n    } else {\n      var _bestScore = Infinity;\n      var _bestColumn = Math.floor(Math.random() * board.length);\n      for (var _column7 of availableColumns) {\n        var _emptyRow = getEmptyRow(_column7, board);\n        var _boardCopy = board.map(function (row) {\n          return row.slice();\n        });\n        _boardCopy[_emptyRow][_column7] = humanPiece;\n        var _currentScore = minimax(_boardCopy, depth - 1, true).score;\n        if (_currentScore < _bestScore) {\n          _bestScore = _currentScore;\n          _bestColumn = _column7;\n        }\n      }\n      return {\n        score: _bestScore,\n        column: _bestColumn\n      };\n    }\n  };\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return _jsx(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      children: item.map(function (value, columnIndex) {\n        var circleStyle = styles.circle;\n        if (value == 1) {\n          circleStyle = [styles.circle, {\n            backgroundColor: '#ccb002'\n          }];\n        } else if (value == 2) {\n          circleStyle = [styles.circle, {\n            backgroundColor: '#b11d22'\n          }];\n        }\n        return _jsx(TouchableWithoutFeedback, {\n          disabled: disabled,\n          onPress: function onPress() {\n            return takeTurn(columnIndex);\n          },\n          children: _jsx(View, {\n            style: circleStyle\n          })\n        }, columnIndex);\n      })\n    });\n  };\n  return _jsxs(View, {\n    style: styles.boardView,\n    children: [_jsx(View, {\n      style: styles.board,\n      children: _jsx(FlatList, {\n        data: data,\n        extraData: data,\n        renderItem: renderItem,\n        keyExtractor: function keyExtractor(_, index) {\n          return index.toString();\n        }\n      })\n    }), _jsxs(View, {\n      style: {\n        flexDirection: 'row',\n        marginTop: wp(6),\n        marginBottom: wp(6)\n      },\n      children: [_jsx(TouchableHighlight, {\n        underlayColor: \"transparent\",\n        onPress: function onPress() {\n          return restartGame();\n        },\n        children: _jsx(View, {\n          style: styles.button,\n          children: _jsx(Text, {\n            style: styles.buttonText,\n            children: \" Restart \"\n          })\n        })\n      }), _jsx(Text, {\n        style: styles.aiText,\n        children: \" AI: \"\n      }), _jsx(Switch, {\n        style: styles.switch,\n        value: ai,\n        trackColor: {\n          true: \"red\",\n          false: \"gray\"\n        },\n        thumbColor: ai ? \"blue\" : \"white\",\n        onValueChange: function onValueChange() {\n          setAi(!ai);\n          if (!ai) {\n            restartGame();\n            window.alert('AI enabled! Game restarted. Now AI will play as the opponent.');\n          } else {\n            restartGame();\n            window.alert('AI disabled! Game restarted. Now the human will play as the opponent.');\n          }\n        }\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  boardView: {\n    flex: 5,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  board: {\n    width: wp(90),\n    height: hp(38.6),\n    backgroundColor: \"#1b2f78\",\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    justifyContent: 'center',\n    flexWrap: 'wrap'\n  },\n  circle: {\n    width: wp(12),\n    height: hp(6),\n    borderRadius: wp(15),\n    backgroundColor: 'white',\n    margin: wp(0.4)\n  },\n  button: {\n    width: wp(25),\n    height: hp(5),\n    alignItems: \"center\",\n    justifyContent: 'center',\n    backgroundColor: \"#0164fe\",\n    borderRadius: wp(3),\n    marginTop: wp(7)\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: wp(5.2),\n    fontFamily: 'notoserif',\n    fontWeight: '300'\n  },\n  aiText: {\n    color: 'black',\n    fontSize: wp(8),\n    fontFamily: 'notoserif',\n    paddingTop: wp(5.8),\n    paddingLeft: wp(5),\n    marginLeft: wp(3)\n  },\n  switch: {\n    transform: [{\n      scaleX: 2\n    }, {\n      scaleY: 2\n    }],\n    marginLeft: wp(5),\n    marginTop: wp(6.7)\n  }\n});\nexport default Board;","map":{"version":3,"names":["React","useEffect","View","Text","FlatList","TouchableWithoutFeedback","TouchableHighlight","Switch","StyleSheet","widthPercentageToDP","wp","heightPercentageToDP","hp","jsx","_jsx","jsxs","_jsxs","Board","_ref","data","setData","turn","setTurn","disabled","setDisabled","ai","setAi","timer","setTimeout","aiTurn","clearTimeout","checkAvailableColumns","board","availableColumns","column","row","push","getEmptyRow","placeCircle","emptyRow","player","dataCopy","_toConsumableArray","checkWin","restartGame","takeTurn","includes","window","alert","length","map","slice","bestMove","minimax","getWindowScore","humanPiece","aiPiece","score","filter","p","evaluate","centerColumn","centerAiPieces","horizontalWindow","verticalWindow","diagonalWindow","depth","maximizingPlayer","bestScore","Infinity","bestColumn","Math","floor","random","boardCopy","currentScore","renderItem","_ref2","item","style","flexDirection","children","value","columnIndex","circleStyle","styles","circle","backgroundColor","onPress","boardView","extraData","keyExtractor","_","index","toString","marginTop","marginBottom","underlayColor","button","buttonText","aiText","switch","trackColor","true","false","thumbColor","onValueChange","create","flex","alignItems","justifyContent","width","height","flexWrap","borderRadius","margin","color","fontSize","fontFamily","fontWeight","paddingTop","paddingLeft","marginLeft","transform","scaleX","scaleY"],"sources":["/usercode/connect4/components/Board.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { View, Text, FlatList, TouchableWithoutFeedback, TouchableHighlight, Switch, StyleSheet } from 'react-native';\nimport { widthPercentageToDP as wp, heightPercentageToDP as hp } from 'react-native-responsive-screen';\n\nconst Board = ({ data, setData, turn, setTurn, disabled, setDisabled, ai, setAi }) => {\n\n  useEffect(() => {\n    if (ai == true && turn == 2) {\n      const timer = setTimeout(() => {\n        aiTurn();\n      }, 2000);\n      return () => clearTimeout(timer);\n    }\n  }, [turn]);\n\n  const checkAvailableColumns = (board) => {\n    let availableColumns = [];\n    for (let column = 0; column <= 6; column++) {\n      for (let row = 5; row >= 0; row--) {\n        if (board[row][column] == null) {\n          availableColumns.push(column);\n          break;\n        }\n      }\n    }\n    return availableColumns;\n  }\n\n  const getEmptyRow = (column, board) => {\n    let row = 5;\n    while (row >= 0) {\n      if (board[row][column] == null)\n        return row;\n      row = row - 1;\n    }\n  }\n\n  const placeCircle = (emptyRow, column, player) => {\n    let dataCopy = [...data];\n    dataCopy[emptyRow][column] = player;\n    setData(dataCopy);\n  }\n\n  const checkWin = (board, player) => {\n    // horizontal win\n    for (let row = 0; row <= 5; row++)\n      for (let column = 0; column <= 3; column++)\n        if (board[row][column] == player && board[row][column+1] == player && board[row][column+2] == player && board[row][column+3] == player)\n          return true;\n    // vertical win\n    for (let row = 0; row <= 2; row++)\n      for (let column = 0; column <= 6; column++)\n        if (board[row][column] == player && board[row+1][column] == player && board[row+2][column] == player && board[row+3][column] == player)\n          return true;\n    // positive diagonals win\n    for (let row = 3; row <= 5; row++)\n      for (let column = 0; column <= 3; column++)\n        if (board[row][column] == player && board[row-1][column+1] == player && board[row-2][column+2] == player && board[row-3][column+3] == player)\n          return true;\n    // negative diagonals win\n    for (let row = 3; row <= 5; row++)\n      for (let column = 6; column >= 3; column--)\n        if (board[row][column] == player && board[row-1][column-1] == player && board[row-2][column-2] == player && board[row-3][column-3] == player)\n          return true;\n    return false;\n  }\n\n  const restartGame = () => {\n    let dataCopy = [...data];\n    for (let row = 0; row < 6; row ++)\n      for(let column = 0; column < 7; column ++) {\n        dataCopy[row][column] = null;\n      }\n    setData(dataCopy);\n    setTurn(1);\n    setDisabled(false);\n  }\n\n  const takeTurn = (column) => {\n    const availableColumns = checkAvailableColumns(data);\n    if (!availableColumns.includes(column)) {\n      window.alert(\"This column is full! Select another one.\");\n      return;\n    }\n    const emptyRow = getEmptyRow(column, data);\n    placeCircle(emptyRow, column, turn);\n    if (checkWin(data, turn) == true) {\n      setDisabled(true);\n      return;\n    }\n    if (checkAvailableColumns(data).length == 0) {\n      setTurn(0);\n      setDisabled(true);\n      return;\n    }\n    turn == 1? setTurn(2) : setTurn(1);\n  }\n\n  const aiTurn = () => {\n    let dataCopy = data.map(row => row.slice());\n    const bestMove = minimax(dataCopy, 4, true).column;\n    const emptyRow = getEmptyRow(bestMove, data);\n    placeCircle(emptyRow, bestMove, turn);\n    if (checkWin(data, turn) == true) {\n      setDisabled(true);\n      return;\n    }\n    if (checkAvailableColumns(data).length == 0) {\n      setTurn(0);\n      setDisabled(true);\n      return;\n    }\n    setTurn(1);\n  }\n\n  const getWindowScore = (window) => {\n    const humanPiece = 1;\n    const aiPiece = 2;\n    let score = 0;\n    if ((window.filter(p => p == aiPiece).length == 3) && (window.filter(p => p == null).length == 1)) {\n      score = score + 5;\n    }\n    else if ((window.filter(p => p == aiPiece).length == 2) && (window.filter(p => p == null).length == 2)) {\n      score = score + 2;\n    }\n    if ((window.filter(p => p == humanPiece).length == 3) && (window.filter(p => p == null).length == 1)) {\n      score = score - 4;\n    }\n    return score;\n  }\n\n  const evaluate = (board) => {\n    const aiPiece = 2;\n    let score = 0;\n    // Center column score check\n    const centerColumn = 3;\n    let centerAiPieces = 0;\n    for (let row = 0; row <= 5; row++) {\n      if (board[row][centerColumn] == aiPiece)\n        centerAiPieces++;\n    }\n    score += (centerAiPieces * 3);\n    // Horizontal score check\n    for (let row = 0; row <= 5; row++) {\n      for (let column = 0; column <= 3; column++) {\n        const horizontalWindow = [board[row][column], board[row][column+1], board[row][column+2], board[row][column+3]];\n        score += getWindowScore(horizontalWindow);\n      }\n    }\n    // Vertical score check\n    for (let row = 0; row <= 2; row++) {\n      for (let column = 0; column <= 6; column++) {\n        const verticalWindow = [board[row][column], board[row+1][column], board[row+2][column], board[row+3][column]];\n        score += getWindowScore(verticalWindow);\n      }\n    }\n    // Positive diagonals score check\n    for (let row = 3; row <= 5; row++) {\n      for (let column = 0; column <= 3; column++) {\n        const diagonalWindow = [board[row][column], board[row-1][column+1], board[row-2][column+2], board[row-3][column+3]];\n        score += getWindowScore(diagonalWindow);\n      }\n    }\n    // Negative diagonals score check\n    for (let row = 3; row <= 5; row++) {\n      for (let column = 6; column >= 3; column--) {\n        const diagonalWindow = [board[row][column], board[row-1][column-1], board[row-2][column-2], board[row-3][column-3]];\n        score += getWindowScore(diagonalWindow);\n      }\n    }\n    return score;\n  }\n\n  const minimax = (board, depth, maximizingPlayer) => {\n    const humanPiece = 1;\n    const aiPiece = 2;\n    const availableColumns = checkAvailableColumns(board);\n    // base recursion case. Stop if depth is 0, ai wins, human wins, or is a draw\n    if (depth == 0 || checkWin(board, aiPiece) || checkWin(board, humanPiece) || availableColumns.length == 0) {\n      if (checkWin(board, aiPiece)) {\n        return { score: 10000, column: null };\n      }\n      else if (checkWin(board, humanPiece)) {\n        return { score: -10000, column: null };\n      }\n      else if (checkAvailableColumns(board).length == 0) {\n        return { score: 0, column: null };\n      }\n      else {\n        return evaluate(board); // how close is AI to winning or loosing and return points accordingly\n      }\n    }\n    // maximizing player\n    if (maximizingPlayer) {\n      let bestScore = -Infinity;\n      let bestColumn = Math.floor(Math.random() * board.length);\n      for (const column of availableColumns) {\n        const emptyRow = getEmptyRow(column, board);\n        let boardCopy = board.map(row => row.slice());\n        boardCopy[emptyRow][column] = aiPiece;\n        let currentScore = minimax(boardCopy, depth - 1, false).score;\n        if (currentScore > bestScore) {\n          bestScore = currentScore;\n          bestColumn = column;\n        }\n      }\n      return { score: bestScore, column: bestColumn };\n    }\n    // minimizing player\n    else {\n      let bestScore = Infinity;\n      let bestColumn = Math.floor(Math.random() * board.length);\n      for (const column of availableColumns) {\n        const emptyRow = getEmptyRow(column, board);\n        let boardCopy = board.map(row => row.slice());\n        boardCopy[emptyRow][column] = humanPiece;\n        let currentScore = minimax(boardCopy, depth - 1, true).score;\n        if (currentScore < bestScore) {\n          bestScore = currentScore;\n          bestColumn = column;\n        }\n      }\n      return { score: bestScore, column: bestColumn };\n    }\n  }\n\n  const renderItem = ({ item }) => {\n    return (\n      <View style={{ flexDirection: 'row' }}>\n        {item.map((value, columnIndex) => {\n          let circleStyle = styles.circle;\n          if (value == 1) {\n            circleStyle = [styles.circle, {backgroundColor: '#ccb002'}];\n          } \n          else if (value == 2) {\n            circleStyle = [styles.circle, {backgroundColor: '#b11d22'}];\n          }\n          return (\n            <TouchableWithoutFeedback disabled={disabled} key={columnIndex} onPress={() => takeTurn(columnIndex)}>\n              <View style={circleStyle}></View>\n            </TouchableWithoutFeedback>\n          );\n        })}\n      </View>\n    );\n  };\n\n  return (\n    <View style={styles.boardView}>\n      <View style={styles.board}>\n        <FlatList\n          data={data}\n          extraData={data}\n          renderItem={renderItem}\n          keyExtractor={(_, index) => index.toString()}\n        />\n      </View>\n      <View style={{flexDirection: 'row', marginTop: wp(6), marginBottom: wp(6)}}>\n        <TouchableHighlight\n          underlayColor=\"transparent\"\n          onPress={() => restartGame()}\n        >\n          <View style={styles.button}>\n              <Text style={styles.buttonText}> Restart </Text>\n          </View>\n        </TouchableHighlight>\n        <Text style={styles.aiText}> AI: </Text>\n        <Switch\n          style={styles.switch}\n          value={ ai }\n          trackColor={{ true: \"red\", false: \"gray\" }}\n          thumbColor={ ai ? \"blue\" : \"white\" }\n          onValueChange={() => {\n            setAi(!ai)\n            if (!ai) {\n              restartGame();\n              window.alert('AI enabled! Game restarted. Now AI will play as the opponent.');\n            } \n            else {\n              restartGame();\n              window.alert('AI disabled! Game restarted. Now the human will play as the opponent.');\n            }\n          }}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  boardView: {\n    flex: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  board: {\n    width: wp(90),\n    height: hp(38.6),\n    backgroundColor: \"#1b2f78\",\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    justifyContent: 'center',\n    flexWrap: 'wrap'\n  },\n  circle: {\n    width: wp(12),\n    height: hp(6),\n    borderRadius: wp(15),\n    backgroundColor: 'white',\n    margin: wp(0.4)\n  },\n  button: {\n    width: wp(25),\n    height: hp(5),\n    alignItems: \"center\",\n    justifyContent: 'center',\n    backgroundColor: \"#0164fe\",\n    borderRadius: wp(3),\n    marginTop: wp(7)\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: wp(5.2),\n    fontFamily: 'notoserif',\n    fontWeight: '300',\n  },\n  aiText: {\n    color: 'black',\n    fontSize: wp(8),\n    fontFamily: 'notoserif',\n    paddingTop: wp(5.8),\n    paddingLeft: wp(5),\n    marginLeft: wp(3),\n  },\n  switch: {\n    transform: [{ scaleX: 2 }, { scaleY: 2 }],\n    marginLeft: wp(5),\n    marginTop: wp(6.7)\n  },\n});\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}