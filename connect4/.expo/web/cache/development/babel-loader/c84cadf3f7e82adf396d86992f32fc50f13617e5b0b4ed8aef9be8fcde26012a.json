{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { widthPercentageToDP as wp, heightPercentageToDP as hp } from 'react-native-responsive-screen';\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Board = function Board(_ref) {\n  var data = _ref.data,\n    setData = _ref.setData,\n    turn = _ref.turn,\n    setTurn = _ref.setTurn,\n    disabled = _ref.disabled,\n    setDisabled = _ref.setDisabled,\n    ai = _ref.ai,\n    setAi = _ref.setAi;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    switchToggle = _useState2[0],\n    setSwitchToggle = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showAlert = _useState4[0],\n    setShowAlert = _useState4[1];\n  useEffect(function () {}, []);\n  var styles = StyleSheet.create({\n    buttonWrapper: {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-evenly',\n      rowGap: wp(10),\n      margin: wp(4)\n    },\n    restartButton: {\n      height: hp(5),\n      width: wp(20),\n      fontSize: wp(4)\n    },\n    textTitle: {\n      fontSize: wp(6),\n      fontWeight: 500,\n      color: '#268ec7'\n    }\n  });\n  var checkAvailableColumns = function checkAvailableColumns(board) {};\n  var getEmptyRow = function getEmptyRow(column, board) {};\n  var placeDisc = function placeDisc(emptyRow, column, player) {};\n  var checkWin = function checkWin(board, player) {};\n  var takeTurn = function takeTurn(column) {};\n  var restartGame = function restartGame() {};\n  var getWindowScore = function getWindowScore(window) {};\n  var evaluate = function evaluate(board) {};\n  var minimax = function minimax(board, depth, maximizingPlayer) {};\n  var aiTurn = function aiTurn() {};\n  var renderDisc = function renderDisc(_ref2) {\n    var item = _ref2.item;\n    return _jsx(View, {\n      children: _jsx(_Fragment, {})\n    });\n  };\n  return _jsxs(View, {\n    children: [_jsxs(\"div\", {\n      style: styles.buttonWrapper,\n      children: [_jsx(\"button\", {\n        style: styles.restartButton,\n        onClick: restartGame(),\n        children: \"Restart\"\n      }), _jsx(Text, {\n        style: styles.textTitle,\n        children: \"AI\"\n      }), _jsx(Switch, {\n        value: switchToggle,\n        onValueChange: function onValueChange(value) {\n          setSwitchToggle(value);\n          setAi(value);\n          setShowAlert(true);\n          restartGame();\n        }\n      })]\n    }), showAlert && (switchToggle ? window.alert(\"AI enabled! Game restarted. Now, an AI will play as the opponent.\") : window.alert(\"AI disabled! Game restarted. Now, a human will play as the opponent.\")), _jsx(FlatList, {\n      data: data,\n      renderItem: function renderItem(_ref3) {\n        var disc = _ref3.disc;\n        return renderDisc(disc);\n      },\n      keyExtractor: function keyExtractor(item, index) {\n        return \"row_\" + index + \"_column_\" + item;\n      }\n    })]\n  });\n};\nexport default Board;","map":{"version":3,"names":["React","useEffect","useState","View","Text","FlatList","TouchableWithoutFeedback","TouchableHighlight","Switch","StyleSheet","widthPercentageToDP","wp","heightPercentageToDP","hp","Fragment","_Fragment","jsx","_jsx","jsxs","_jsxs","Board","_ref","data","setData","turn","setTurn","disabled","setDisabled","ai","setAi","_useState","_useState2","_slicedToArray","switchToggle","setSwitchToggle","_useState3","_useState4","showAlert","setShowAlert","styles","create","buttonWrapper","display","flexDirection","alignItems","justifyContent","rowGap","margin","restartButton","height","width","fontSize","textTitle","fontWeight","color","checkAvailableColumns","board","getEmptyRow","column","placeDisc","emptyRow","player","checkWin","takeTurn","restartGame","getWindowScore","window","evaluate","minimax","depth","maximizingPlayer","aiTurn","renderDisc","_ref2","item","children","style","onClick","value","onValueChange","alert","renderItem","_ref3","disc","keyExtractor","index"],"sources":["/usercode/connect4/components/Board.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { \n  View,\n  Text,\n  FlatList,\n  TouchableWithoutFeedback,\n  TouchableHighlight,\n  Switch,\n  StyleSheet\n} from 'react-native';\nimport { \n  widthPercentageToDP as wp,\n  heightPercentageToDP as hp\n} from 'react-native-responsive-screen';\n\nconst Board = ({ data, setData, turn, setTurn, disabled, setDisabled, ai, setAi }) => {\n\n  /*\n    Props\n    data => 2d array of 6 rows and 7 columns representing the state of the connect4 game board\n    setData => Method to update the data prop\n    turn => Integer representing whose turn it is, i.e., player 1, player 2, or AI\n    setTurn => Method to update the turn prop\n    disabled => Boolean to enable or disable the connect4 game board. Board is disabled once the game is over\n    setDisabled => Method to update the disabled prop\n    ai => Boolean representing whether the AI is playing or not. If false, it means player 2 is playing\n    setAi => Method to update the ai prop\n  */\n\n    const [switchToggle, setSwitchToggle] = useState(false)\n    const [showAlert, setShowAlert] = useState(false)\n    // const [alertText, setAlertText] = useState(false)\n\n  useEffect(() => {\n    // Write Task 11 code below this line\n  }, []);\n\n  const styles = StyleSheet.create({\n    buttonWrapper: {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-evenly',\n      rowGap: wp(10),\n      margin: wp(4),\n    },\n    restartButton: {\n      height: hp(5),\n      width: wp(20),\n      fontSize: wp(4),\n    },\n    textTitle: {\n        fontSize: wp(6),\n        fontWeight: 500,\n        color: '#268ec7',\n    }\n  })\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n  */\n  const checkAvailableColumns = (board) => {\n    // Write Task 5 code below this line\n  }\n\n  /*\n    Parameters\n    column => Integer between 0 and 6 (inclusive) representing column index of the connect4 game board\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n  */\n  const getEmptyRow = (column, board) => {\n    // Write Task 5 code below this line\n  }\n\n  /*\n    Parameters\n    emptyRow => Integer representing row index having a value of null where disc can be placed\n    column => Integer between 0 and 6 (inclusive) representing column index of the connect4 game board\n    player => Integer representing 1 for player 1 and 2 for player 2 or AI\n  */\n  const placeDisc = (emptyRow, column, player) => {\n    // Write Task 5 code below this line\n  }\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n    player => Integer representing 1 for player 1 and 2 for player 2 or AI\n  */\n  const checkWin = (board, player) => {\n    // Write Task 6 code below this line\n  }\n\n  /*\n    Parameters\n    column => Integer between 0 and 6 (inclusive) representing column index of the connect4 game board\n  */\n  const takeTurn = (column) => {\n    // Write Task 7 code below this line\n  }\n\n  const restartGame = () => {\n    // Write Task 8 code below this line\n  }\n\n  /*\n    Parameters\n    window => An array of length 4 whose indices can have one of the following values: 1, 2, and null\n  */\n  const getWindowScore = (window) => {\n    // Write Task 9 code below this line\n  }\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n  */\n  const evaluate = (board) => {\n    // Write Task 9 code below this line\n  }\n\n  /*\n    Parameters\n    board => 2d array of 6 rows and 7 columns representing the connect4 game board\n    depth => Integer representing the recursion depth. Can have values 1 and greater than 1\n    maximizingPlayer => Boolean value representing whether the player is maximizing or not\n  */\n  const minimax = (board, depth, maximizingPlayer) => {\n    // Write Task 10 code below this line\n  }\n\n  const aiTurn = () => {\n    // Write Task 11 code below this line\n  }\n\n  // Write Task 2 and Task 3 code below this line\n\n  const renderDisc = ({item}) => {\n    return (\n      <View>\n        <></>\n      </View>\n    )\n  }\n\n  return (\n    <View>\n      <div style={styles.buttonWrapper}>\n      <button style={styles.restartButton} onClick={restartGame()}>Restart</button>\n      <Text style={styles.textTitle}>AI</Text> \n      <Switch \n        value={switchToggle} \n        onValueChange={(value) => {\n          setSwitchToggle(value)\n          setAi(value)\n          setShowAlert(true)\n          restartGame()\n        }} \n      />\n      </div>\n      {showAlert && (\n        switchToggle ? window.alert(\"AI enabled! Game restarted. Now, an AI will play as the opponent.\") : window.alert(\"AI disabled! Game restarted. Now, a human will play as the opponent.\")\n      )}\n\n      <FlatList \n        data={data}\n        renderItem={({disc}) => renderDisc(disc)}\n        keyExtractor={(item, index) => `row_${index}_column_${item}`}\n      />\n      \n    </View>\n  );\n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}